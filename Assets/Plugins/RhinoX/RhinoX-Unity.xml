<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RhinoX-Unity</name>
    </assembly>
    <members>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextTypes">
             \enum XContextTypes
             \brief The parameters of the function, fill in the action_id
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes">
             /////////////////////////////////////////////////////////////////////
             \enum XControllerTypes
              \bref Types defined of Ximmerse Controllers
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes.kXControllerKylo-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes.kXControllerDType-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes.kXControllerPickUp-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes.kXController3Dof-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes.kXControllerTag-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes.kXControllerTagLeft-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XTrackingStates">
             \enum TrackingResult
             \brief Tracking status
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XTrackingStates.kXTrackingSt_RotationTracked-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XTrackingStates.kXTrackingSt_PositionTracked-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XTrackingStates.kXTrackingSt_PoseTracked-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XTrackingStates.kXTrackingSt_RotationEmulated-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XTrackingStates.kXTrackingSt_PositionEmulated-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerButtonMasks">
             @enum XControllerButtonMasks
             @brief Masks of Controller buttons.
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextStates">
             @enum XContextStates
             @brief State of Context.
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextStates.kXContextStStarted-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextStates.kXContextStWillRelease-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextAttributes">
             @enum XContextAttributes
             @brief Attributes of Context
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextAttributes.kXCtxAttr_Int_SdkVersion">
             Get the SDK platform support library version 
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextAttributes.kXCtxAttr_Int_SdkBuildNo">
             Get the SDK platform support library version build No.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextAttributes.kXCtxAttr_Str_SdkVersion">
             Get the SDK platform support library version 
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextAttributes.kXCtxAttr_Str_SdkBuildDetail-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes">
             @enum XVpuAttributes
             @brief Attributes of VPU Device.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_AlgorithmPoseFps">
             Reversed
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_ConnectionState">
             Connection state of Controller, see \ref XConnectionStates
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_Battery">
             Battery Level. Invalid if battery mode is external power
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Obj_ImuInfo">
             IMU info of device, see \ref XAttrImuInfo
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_V_ImuInfo">
             IMU info of device, Output to variable aguments. Invalid for Unity
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Obj_6DofInfo">
             6Dof info of device, see \ref XAttr6DofInfo
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_V_6DofInfo">
             6Dof info of device, Output to variable aguments. Invalid for Unity
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_ButtonBits">
             Pressed button bits
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_ButtonEvent">
             Button events, \ref XButtonEvents
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_PairedNumber">
             Number of Paired controllers
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Obj_ControllerState">
             Device infos, imu, 6dof, buttons ... see \ref XAttrControllerState
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Obj_TrackingInfo">
             VPU cammera tracking object pose info. see \ref XAttrTrackingInfo
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_V_TrackingInfo">
             VPU cammera tracking object pose info. Output to variable aguments
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Obj_PairedInfos">
             VPU paired controllers, see \ref XAttrPairedInfos
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes">
             @enum XControllerAttributes
             @brief Attribute types of controller.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_ImuFps">
             FPS of controller device reporting IMU data
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_ConnectionState">
             Connection state of Controller, see \ref XConnectionStates
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_Battery">
             Battery Level. Invalid if battery mode is external power
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Obj_ImuInfo">
             IMU info of device, see \ref XAttrImuInfo
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_V_ImuInfo">
             IMU info of device, Output to variable aguments. Invalid for Unity
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Obj_6DofInfo">
             6Dof info of device, see \ref XAttr6DofInfo
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_V_6DofInfo">
             6Dof info of device, Output to variable aguments. Invalid for Unity
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_ButtonBits">
             Pressed button bits
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_ButtonEvent">
             Button events, \ref XButtonEvents
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Obj_TouchPadState">
             Device touchpad state info. see \ref XAttrTouchPadInfo
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Obj_ControllerState">
             Device infos, imu, 6dof, buttons ... see \ref XAttrControllerState
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_Type">
             Get Controller device type, see \ref XControllerTypes.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Obj_Address">
             Get Controller device address (MAC address with little endian format)
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Str_Address">
             Get Controller device address, return hex string with big endian.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_BindID">
             Get Bind ID of connected controller.
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XButtonEvents">
             @enum XButtonEvents
             @brief Button events
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XButtonEventParam">
             @struct XButtonEventParam
             @brief Parameters for button event notification
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XButtonEventParam.btn">
             Button key value.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XButtonEventParam.evt">
             Event value. see \ref XButtonEvents
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XConnectionStates">
             @enum XConnectionStates
             @brief Connection state of device
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttr6DofInfo">
             @struct XAttr6DofInfo
             @brief Structure for gettting 6Dof information
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttr6DofInfo.rotation-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttr6DofInfo.timestamp-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrImuInfo">
             @struct XAttrImuInfo
             @brief Structure for getting IMU information.
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrImuInfo.gyroscope-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrImuInfo.magnetism-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrImuInfo.timestamp-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrTrackingInfo">
             @struct XAttrTrackingInfo
             @brief VPU cammera tracking object pose info.
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrControllerState">
             @struct XAttrControllerState
             @brief Structure for getting controller state informations.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrControllerState.rotation">
             quaternion 
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrControllerState.position-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrControllerState.button_state-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrTouchPadState.x-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrTouchPadState.y-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrPairedInfos">
             \struct XAttrPairedInfos
             \bref Structure for getting infomation of paired controllers.
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrPairedInfos.bind_id_a-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrPairedInfos.mac_a-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions">
             \enum XActions
             \brief The parameters of the DoAction method , fill in the action_id
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_UnpairAllControllers-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_StartPairingController-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_StopPairingController-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_ConnectControllerByBindID-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_ConnectAllPairedControllers-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_DisconnectControllerByIndex-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_DisconnectControllerByBindID-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_DisconnectAllControllers-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_Vibrate-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_Vibrate_V-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_Sleep-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_Wakeup-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_ConnectControllerByMacAddr-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_UnpairControllerByBindId-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_CustomBegin-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_SlideInActionsBegin-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_LoadMarkerSettingFile-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_ResetMarkerSettings-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_LoadCameraCalibrationFile-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_SetPositionSmooth-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_SetFpgaMaxFps-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_ConnectControllerByMacAddrHex-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_ConnectControllerByRfid-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_PairControllerByRfid-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_PairControllerByMatchRfid-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_SetAlgorithmMaxRotateAngle-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_SetAlgorithmMaxTranslationDistance-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_Max-->
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_CtxDeviceVersion">
             deprecated
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_CtxSdkVersion">
             \deprecated use \ref XContextAttributes.kXCtxAttr_Int_SdkVersion instead.
             Get the SDK platform support library version 
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_CtxSDKALGVersion">
             \deprecated use \ref XContextAttributes.kXCtxAttr_Int_SDKALGVersion instead. 
             Get the SDK algorithm version and the version number returned is hexadecimal
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_FPS">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Int_ImuFps and \ref XControllerAttributes.kXCAttr_Int_ImuFps instead.
             Gets the frame rate of the device
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_ErrorCode">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Int_ErrorCode and \ref XControllerAttributes.kXCAttr_Int_ErrorCode instead,
             Get the device error code
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_ConnectionState">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Int_ConnectionState and \ref XControllerAttributes.kXCAttr_Int_ConnectionState instead,
             Gets the device connection status
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_BlobID">
             \deprecated
             Gets the ID of the controller marker. Reserved.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_SetBlogID">
             \deprecated 
             Sets the ID of the controller marker. Reserved.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_Battery">
             \deprecated use \ref XVpuAttributes.kXCAttr_Int_Battery and \ref XControllerAttributes.kXCAttr_Int_Battery instead,
             Acquire the battery capacity of the device
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_BatteryMode">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Int_PowerMode and \ref XControllerAttributes.kXCAttr_Int_PowerMode instead.
             Gets the power supply mode of the device
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_BatteryVoltage">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Int_BatteryVoltage and \ref XControllerAttributes.kXCAttr_Int_BatteryVoltage instead.
             Gets the battery voltage of the device
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_BatteryTemperature">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Int_BatteryTemperature and \ref XControllerAttributes.kXCAttr_Int_BatteryTemplarature instead.
             Gets the battery temperature of the device
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_SoftwareRevision">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Str_SoftwareRevision and \ref XControllerAttributes.kXCAttr_Str_SoftwareRevision instead.
             Gets firmware version and returns a string
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_HardwareRevision">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Str_HardwareRevision and \ref XControllerAttributes.kXCAttr_Str_HardwareRevision instead.
             Gets hardware version and returns a string
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_FPGAVersion">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Str_FPGAVersion instead
             Gets FPGA version and returns a string
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_ModelName">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Str_ModelName and \ref XControllerAttributes.kXCAttr_Str_ModelName instead.
             Gets model name and returns a string
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_DisplayName">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Str_DeviceName and \ref XControllerAttributes.kXCAttr_Str_DeviceName instead.
             Gets display name information and returns a string
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_ALGVersion">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Str_ALGVersion instead.
             Gets the version of the algorithm on the firmware and returns a string
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_SerialNumber">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Str_SerialNumber and \ref XControllerAttributes.kXCAttr_Str_SerialNumber instead.
             Get the device serial number for production
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_ManufacturerName">
             \deprecated use \ref XControllerAttributes.kXCAttr_Str_ManufacturerName instead.
             Gets the manufacturer of device
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_FirmwareRevision">
             \deprecated use \ref XControllerAttributes.kXCAttr_Str_FirmwareRevision instead.
             An extended interface to get firmware version information
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetImuInfo">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Obj_ImuInfo and \ref XControllerAttributes.kXCAttr_Obj_ImuInfo instead.
             Command to get the IMU information and the argument is the structure of ActParam_IMUInfo
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetImuInfo_V">
             \deprecated
             Command to get IMU information with variable parameters. This command is INVALID in Unity.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_Get6DofInfo">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Obj_6DofInfo and \ref XControllerAttributes.kXCAttr_Obj_6DofInfo instead.
             Command to get 6-Dof information and the argument is the structure of ActParam_6DofInfo
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_Get6DofInfo_V">
             \deprecated
             Command to get 6-Dof information with variable parameters, this command is INVALID in Unity.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_ButtonBits">
             \deprecated use \ref XVpuAttributes.XVpuAttr_Int_ButtonBits and XCAttributes.XVpuAttr_Int_ButtonBits instead.
             Command to get buttons information 
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_Get_TouchPadState">
             \deprecated use \ref XCAttributes.kXCAttr_Obj_TouchPadState instead.
             Command to get touchPad information. Reserved
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_PairedNumber">
             \deprecated
             The command to set the VPU reference time. Reserved
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetPairedList">
             \deprecated
             Gets the ID list of controllers that have been paired. Reserved
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetControllerState">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Obj_ControllerState and XCAttributes.kXCAttr_Obj_ControllerState instead.
             Command to get controller state and the argument is the structure of ActParam_ControllerState
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetMarkerInfo">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Obj_TrackingInfo instead.
             Get the 6-dof information of Marker
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetMarkerInfo_V">
             \deprecated 
             Obtain the 6-dof information of Marker with variable parameters. This command is INVALID in Unity.
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle">
             \brief Input device handle
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.xdev_init-->
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.Init">
             \fn public static int Init()
             \brief  Initialization of the platform support library for input devices
             \return Return 0 indicates success
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.Exit">
             \fn public static int Exit()
             \brief  Exit the platform support library for the input device
             \return Return 0 indicates success
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.NewContext(Ximmerse.RhinoX.Internal.XDevicePlugin.XContextTypes)">
             \fn public static XHandle NewContext(XContextTypes context_type)
             \brief  Create the device context
                \param [in] context_type device type
             \return Return the XHandle of device
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.ReleaseContext(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle)">
             \fn public static int ReleaseContext(XHandle context_handle)
             \brief  Destroy the device context
                \param [in] context_handle The device handle
             \return Return 0 indicates success
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XLogDelegate">
             \brief  Delegate for printing output
                \param [in] level Print level
                \param [in] tag Printed label
                \param [in] log Printed content    
             \return no return value
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.sLogDelegate">
             \var static XLogDelegate sLogDelegate
             \brief Persistence of logger object.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.SetLogger(Ximmerse.RhinoX.Internal.XDevicePlugin.XLogDelegate,Ximmerse.RhinoX.Internal.XDevicePlugin.XLogLevels)">
             \fn public static void SetLogger(XLogDelegate logger, XLogLevels lv = XLogLevels.kXLogLevel_Debug)
             \brief  Set up the print listener of XLogDelegate
                \param [in] logger The parameter of XLogDelegate type 
             \return no return value
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetName(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle)">
             \fn public static string GetName(XHandle handle)
             \brief Get Name of the provided handle
             \param [in] handle
             \return return the name.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetDeviceHandle(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,System.String)">
             \fn public static XHandle GetDeviceHandle(XHandle context_handle, string name)
             \brief  Gets the device handle through the device name
                \param [in] context_handle The device handle
                \param [in] name device name
             \return Return 0 indicates success
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetBool``1(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,``0,System.Boolean)-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetInt``1(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,``0,System.Int32)-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetFloat``1(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,``0,System.Single)-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetString``1(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,``0,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetObject``2(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,``0,``1@)-->
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.DoAction(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,Ximmerse.RhinoX.Internal.XDevicePlugin.XActions)">
             \fn public static int DoAction(XHandle handle, XActions action_id)
             \brief  function is used to control input device
                \param [in] handle Handle to the device,
                \param [in] action_id Command name,please see the enum of XActions
             \returnResult of the command, 0 for success.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.DoAction(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,Ximmerse.RhinoX.Internal.XDevicePlugin.XActions,System.String)">
             \fn public static int DoAction(XHandle handle, XActions action_id, string args)
             \brief  function is used to control input device
                \param [in] handle Handle to the device,
                \param [in] action_id Command name,please see the enum of XActions
                \param [in] args String parameter
             \return Result of the command, 0 for success.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.DoAction(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,Ximmerse.RhinoX.Internal.XDevicePlugin.XActions,System.Int32)">
             \fn public static int DoAction(XHandle handle, XActions action_id, int args)
             \brief  function is used to control input device
                \param [in] handle Handle to the device,
                \param [in] action_id Command name,please see the enum of XActions
                \param [in] args Int parameter
             \return Result of the command, 0 for success.
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.DoAction``1(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,Ximmerse.RhinoX.Internal.XDevicePlugin.XActions,``0@)-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.DoAction``1(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,Ximmerse.RhinoX.Internal.XDevicePlugin.XActions,``0)-->
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.CopyAssetsToPath(System.String,System.String)">
             \fn public static int CopyAssetsToPath(string dest_directory_path, string name_regex = ".*\\.(json|dat)$")
             \brief Copy calibration config files to destination folder from assets. This method only valid on android devices.
                 \param [in] dest_directory_path Dest folder path.
                 \param [in] name_regex Regex string to match file which need to be copy.
             \return Return 0 for sucess, otherwise failure.
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.RegisterObserver``2(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,``0,System.Delegate,``1)-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.UnregisterObserver``1(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,``0,System.Delegate)-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerPairingEvents.kPairingEventStop-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerPairingEvents.kPairingEventPaired-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerPairingEvents.kPairingEventUnpaired-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext">
             @defgroup Context APIs
             @{
             \brief Class provides Context APIs and attributions
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu">
              @} // Context APIs
             @defgroup VPU APIs
             @{
             \brief Class provides VPU APIs and attributions
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetPairedControllerInfoByType(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes)">
             \brief Get Paired controller information with specified controller type
             \param type Controller type, \ref XControllerTypes
             \return Return the first found controller informaction.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetConnectedControllerNumber">
             \brief Get number of connected controllers.
             \return Return number of connected controllers.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetControllerConnectableNumber">
             \brief Get connectable controller number.
             \return 
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetConnectedControllerList(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerInfo[]@)">
             \brief Get connected controller information.
             \param vpu_handle
             \param out_info_buffer
             \return Return number of connected controllers.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.ConnectControllerByMacAddr(System.Byte[])">
             \brief Request VPU to connect controller with specified MAC address.
             \param mac_addr MAC address to connect. Little endian byte array.
             \return Return 0 for success, otherwise for error.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.ConnectControllerByBindId(System.Int32)">
             \brief Request VPU to connect controller with the specified bind ID.
             \param bindid Bind ID indicates which controller
             \return Return 0 for success, otherwise for error.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.DisconnectController(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle)">
             \brief Request VPU to disconnect controller.
             \param controller_handle Handle of controller.
             \return Return 0 for success, otherwise for error.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.DisconnectControllerByBindId(System.Int32)">
             \brief Request VPU to disconnect controller with specified bind ID.
             \param bindid Bind ID of controller.
             \return Return 0 for success, otherwise for error.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.DisconnectControllerByMacAddr(System.Byte[])">
             \brief Request VPU to disconnect controller with specified MAC address.
             \param mac_addr  MAC address. Little endian byte array.
             \return  Return 0 for success, otherwise for error.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.RegisterControllerPairingDelegate(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerPairingEventsDelegate)">
             \brief Register delegate to listen controller pairing events.
             \param vpu_handle
             \param delegate Pairing events delegate.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.UnregisterControllerPairingDelegate(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerPairingEventsDelegate)">
             \brief Unregister pairing event delegate
             \param delegate Pairing events delegate.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetPairedControllerNumber">
             \brief Get number of paired controllers.
             \return Return paired controller number.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetControllerPairableNumber">
             \brief Get the MAX available controller paired number.
             \return Return MAX number of controller can be paired to VPU.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.StartPairingByType(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes)">
             \brief Request VPU to start pairing to specified type controller.
             \param type Controller type to pairing.
             \return Return 0 for success, otherwise for error.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.StopPairing">
             \brief Request VPU to stop pairing.
             \return Return 0 for success, otherwise for error.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetPairedControllerList(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerInfo[]@)">
             \brief Get paired controller information.
             \param info_buffer XControllerInfo type array for outputing controller information.
             \return Return count of paired controller info to output.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.UnpairController(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle)">
             \brief Request VPU to unpair a paired controller.
             \param vpu_handle
             \param controller_handle Controller handle which to unpair.
             \return \return Return 0 for success, otherwise for error.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.UnpairControllerByMacAddress(System.Byte[])">
             \brief Request VPU to unpair controller with specified MAC address.
             \param vpu_handle
             \param mac_addr MAC address of controller, Little endian byte array.
             \return \return Return 0 for success, otherwise for error.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.UnpairControllerByBindId(System.Int32)">
             \brief Request VPU to unpair controller with specified bind ID.
             \param vpu_handle
             \param bind_id Bind ID indicates which controller.
             \return \return Return 0 for success, otherwise for error.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.HoldControllerConnection(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,System.Int32)">
             \brief Request VPU to hold controller connection after SDK deinited.
             \param controller_handle A connected controller handle which to hold connection.
             \param hold_time_in_sec Time interval in seconds for holding connection.
             \return Return 0 for success, otherwise for error.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.SetTrackingIdlePowerSaving(System.Boolean)">
             \defgroup VPU Control
             \{
             \brief Enable or disable power saving while not in tracking.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.StartVpuUpgrading(Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.XFirmwareProjectTypes,Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.XFirmwareTypes,System.String,System.String,Ximmerse.RhinoX.Internal.XDevicePlugin.XDeviceFirmwareUpgradeEventsDelegateFn_t,System.Int32)">
             \brief Start VPU firmware upgrading.
             \param proj_type Project type(VPU type), see \ref XFirmwareProjectTypes
             \param fw_type Firmware type, see \ref XFirmwareTypes
             \param fw_version Firmware version. A string with 4 digits, ex. "0041".
             \param fw_path Path of firmware file.
             \param event_delegate Upgrading events callback delegate. See \ref XDeviceFirmwareUpgradeEventsDelegateFn_t
             \param wait_ms Reserve.
             \return Return kErrCodeNoError for starting success, otherwise for failure and events delegate would never be invoted.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.Equals(Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu)">
             \}
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XController">
             @} // VPU APIs
             @defgroup Controller APIs
             @{
             \brief Class init by handle and provides Controller APIs and attributions
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.GetConnectState">
             \brief Get Connect State
             \return See \ref XConnectionStates
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XErrorCodes">
             @} // Controller APIs
             \defgroup Error codes
             \{
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.TestLog(System.String,System.Boolean)">
             \} // Error codes
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.mXHawkAttrDic">
             \defgroup Deprecated APIs compat
              \{
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_6DofInfo">
             \struct ActParam_6DofInfo
             \brief Structure for gettting 6-Dof information
             \deprecated use \ref XAttr6DofInfo
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_6DofInfo.rotation-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_6DofInfo.timestamp-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_6DofInfo.Obtain-->
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_6DofInfo.#ctor(System.Single)">
             \brief  constructor
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_IMUInfo">
             \struct ActParam_IMUInfo
             \brief Structure for getting IMU information.        
             \deprecated Use \ref XAttrImuInfo
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_IMUInfo.gyroscope-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_IMUInfo.magnetism-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_IMUInfo.timestamp-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_IMUInfo.Obtain-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_VibrateArgs">
             \struct ActParam_VibrateArgs
             \brief The structure that sets the vibration parameters is used by the command of kXAct_Get_6DofInfo
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_VibrateArgs.duration-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_VibrateArgs.#ctor(System.Int32,System.Int32)-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_TouchpadState">
             @struct ActParam_TouchpadState
             @brief Touchpad State structure for \ref kXAct_Get_TouchPadState
             \deprecated Use \ref XAttrTouchPadState
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_TouchpadState.x-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_TouchpadState.y-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_MarkerInfo">
             \struct ActParam_MarkerInfo
             \brief The structure is Marker information returned by the calling command of
             \deprecated Use \ref XAttrTrackingInfo 
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_MarkerInfo.state-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_MarkerInfo.position-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_MarkerInfo.rotation-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_MarkerInfo.timestamp-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_MarkerInfo.recognized_markers_mask-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_ControllerState">
             \struct ActParam_ControllerState
             \brief The structure for returning controller state by calling DoAction with kXAct_GetControllerState
             \deprecated Use \ref XAttrControllerState
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_ControllerState.axes-->
        <member name="T:Ximmerse.RhinoX.Internal.EyeRenderer">
             <summary>
             Eye renderer script : internal class, render image per eye.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.EyeRenderer.bufferCount">
             <summary>
             Buffer count of eye textures array.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.EyeRenderer.side">
             <summary>
             Side.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.EyeRenderer.m_EyeTextures">
             <summary>
             The eye texture buffers for HLAPI-LLAPI transimiting
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.EyeRenderer.m_EyeTextureIds">
             <summary>
             The eye texture identifiers.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.EyeRenderer.IsRunning">
             <summary>
             Internal status indcate if eye renderer is running;
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.EyeRenderer.TextureId">
             <summary>
             Gets texture pointer ID.
             </summary>
             <value>The texture identifier.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.EyeRenderer.PreviousId">
             <summary>
             Gets the previous texture pointer ID.
             </summary>
             <value>The previous identifier.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.EyeRenderer.InitializeBuffers(Ximmerse.RhinoX.AntiAliasing)">
             <summary>
             Initializes the eye view render image.
             </summary>
             <param name="AntiAliasing">Anti aliasing.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.EyeRenderer.InitializeCoords">
             <summary>
             Initializes the image coordinates (normalized view rect)
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.EyeRenderer.OnPreRender">
             <summary>
             Unity pre camera rendering event.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.EyeRenderer.OnPostRender">
             <summary>
             Unity post camera rendering event.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.ARCamera">
             <summary>
             AR camera : rendering
             </summary>
             <summary>
             AR camera is the script that represents virtual camera in AR world.
             Developer may get the position/rotation of current head transform.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.event_beginCameraRendering">
             <summary>
             Reflection method info : begin camera rendering event (add/remove)
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.requireRenderingPipeline">
             <summary>
             If the current unity version supports rendering pipeline event ?
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.kLightCenter_X">
             <summary>
             const projection matrix vertical offset (the m02 field of the projection matrix).
             This is the light center offset X
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.kLightCenter_Y">
             <summary>
             const projection matrix vertical offset (the m12 field of the projection matrix).
             This is the light center offset Y
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.SupportRenderingPipeline">
             <summary>
             Codes for unity scriptable rendering pipeline.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.OnDestroyRendering">
             <summary>
             On destroy for rendering
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.__OnPipelinePreRender(UnityEngine.Camera)">
             <summary>
             Scriptable-Pipeline-Renderer event : on pre-rendering.
             </summary>
             <param name="__camera">Camera.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.CreateEyesAndTrackingAnchors">
             <summary>
             Creates left, right cameras.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.CreateEyeRenderers">
             <summary>
             Create eye renderers
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.UpdateEyesTransform">
             <summary>
             Update eyes position/rotation
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.UpdateEyeFrustum">
             <summary>
             Updates the eye camera's view frustum.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.GetFoveationValues">
             <summary>
             Gets the foveation values.
             </summary>
             <returns>The foveation values.</returns>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.hFov">
             <summary>
             Gets the horizontal field of view.
             By default this value = 77.091.
             </summary>
             <value>The h fov.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.vFov">
             <summary>
             Gets the vertical field of view.
             By default this value = 77.091.
             </summary>
             <value>The v fov.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.SetFov(System.Single,System.Single)">
             <summary>
             Sets the horizontal and vertical fov.
             </summary>
             <returns>The fov.</returns>
             <param name="hFov">H fov.</param>
             <param name="vFov">V fov.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.ResetFov">
             <summary>
             Resets the horizontal and vertical fov.
             Default value : hFov = 77.099 , hFov = 77.099
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.ARCamera.OnCreateStereoCameras">
             <summary>
             Event is fired after stereo eyes are created.
             Developers can add post effect scripts on this event.
             First camera parameter = left eye camera;
             Second camera parameter = right eye camera;
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.interPupilDistance">
             <summary>
             IPD : default value is 62mm
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.InterPupilDistance">
             <summary>
             IPD : inter pupil distance.
             Most common value is 0.062 (62mm), developer may customize this value .
             </summary>
             <value>The inter pupil distance.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.Antialiasing">
             <summary>
             Gets or sets the anti aliasing level of eye image.
             </summary>
             <value>The anti aliasing.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.TrackPosition">
             <summary>
             Should track position ? If set to use, position of head would not be updated by SDK.
             </summary>
             <value><c>true</c> if shoud track position; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.TrackRotation">
             <summary>
             Should track rotation ? If set to use, rotation of head would not be updated by SDK.
             </summary>
             <value><c>true</c> if shoud track position; otherwise, <c>false</c>.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.leftEye">
             <summary>
             Non serialized transforms : eye mount (parent to left and right eye).
             left eye and right eye.
             EyeMount : parent to left and right eye transform.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.EyeMount">
             <summary>
             Gets the eye center node.
             </summary>
             <value>The left eye node.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.LeftEyeNode">
             <summary>
             Gets the left eye transform.
             </summary>
             <value>The left eye node.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.RightEyeNode">
             <summary>
             Gets the right eye transform.
             </summary>
             <value>The right eye node.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.trackingAnchor">
             <summary>
             Tracking anchor : Center, left, right.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.reverseEyeCenterP">
             <summary>
             P and Q for getting head world P and Q by tracking anchor (center T)'s global P and Q.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.vioPredictHeadPose">
             <summary>
             Internal field : head pose (predict)
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.HeadPose">
             <summary>
             Head pose (non predict)
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.poseQueue">
             <summary>
             pose queue for cache a short time period for backward tracing.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.frameCount">
             <summary>
             The frame count.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.poseStatus">
             <summary>
             The frame pose status.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.IsSupported">
             <summary>
             Is the codes running on supported platform ?
             </summary>
             <value><c>true</c> if is supported; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.TrackingProfile">
             <summary>
             Gets the currently loaded tag tracking profile.
             Sets this variable will cause the previous profile been unloaded, then the new one will be loaded.
             </summary>
             <value>The tracking profile.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.trackingEngine">
             <summary>
             The ximmerse AIO device config. Config device instance differences.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.OnApplicationPause(System.Boolean)">
             <summary>
             Application event : on application pause
             </summary>
             <param name="pause">If set to <c>true</c> pause.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.OnApplicationQuit">
             <summary>
             Application event : on application quit
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.InitializeSVR">
             <summary>
             Initialize the SVR LLSys.
             </summary>
             <returns>The initialize.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.InitializeXDeviceLib">
             <summary>
             Initialize xdevice library.
             </summary>
             <returns>The XD evice.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.BeginAR">
             <summary>
             Begin AR : starts VIO.
             </summary>
             <returns>The ar.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.ShutdownSVR">
             <summary>
             Shutdown SVR LLAPI.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.RecenterTracking(System.Boolean)">
             <summary>
             Recenters the tracking.
             </summary>
             <returns><c>true</c>, if tracking was recentered, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.ResetTracking">
             <summary>
             Reset 6DOF head tracking.
             Note : this method restart VIO tracking system internally. Head tracking will total lose in 0.5-1 second.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.SearchFrameBackward(System.Single,Ximmerse.RhinoX.Internal.PoseFrame@)">
             <summary>
             Searchs a frame in backward time.
             </summary>
             <returns>The frame backward.</returns>
             <param name="backwardTime">Backward time.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.RenderEvent">
             <summary>
             Render event : event pass to SVR LLAPI.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.ControllerGyroscope">
             <summary>
             Controller gyroscope information
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerGyroscope.Rotation">
             <summary>
             Gets controller gyroscope rotation.
             </summary>
             <value>The rotation.</value>
            </member>
        <member name="T:Ximmerse.RhinoX.RXController">
             <summary>
             High level SDK script for developers to access controller data and event, e.g. buttons, gyroscopes, finger point over touch-pad.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.Index">
             <summary>
             Gets or sets the index the controller that this instance pairs to.
             </summary>
             <value>The index.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.raycaster">
             <summary>
             Gets or sets the raycaster that this controller bounds to.
             </summary>
             <value>The raycaster.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.HasTouchPadPoint">
             <summary>
             When using Ximmerse flip controller, this properties indicates if player has finger down on touch pad. 
             </summary>
             <value><c>true</c> if has touch point; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.TouchPadPoint">
             <summary>
             Gets the touch pad pointer value, when HasTouchPadPoint = true.
             </summary>
             <value>The touch pad point.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.IsTap(Ximmerse.RhinoX.ControllerButtonCode)">
             <summary>
             Is user taping the specific button ?
             </summary>
             <returns><c>true</c>, if tap was ised, <c>false</c> otherwise.</returns>
             <param name="button">Button.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.IsPress(Ximmerse.RhinoX.ControllerButtonCode)">
             <summary>
             Is user current holding the button down ?
             </summary>
             <returns><c>true</c>, if press was ised, <c>false</c> otherwise.</returns>
             <param name="button">Button.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.TrackableIdentity">
             <summary>
             Trackable object identity. Constraint by an integral trackable ID , represents a trackable object in real world.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableIdentity.TrackableID">
             <summary>
             Gets or sets the trackable identifier.
             Trackable ID changed at runtime will cause the identity bounds to the new trackable object.
             </summary>
             <value>The trackable identifier.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableIdentity.ActivateGameObject">
             <summary>
             Script will activate and deactivate game object when this identity is tracked or not tracked.
             </summary>
             <value><c>true</c> if deactivate game object when not tracked; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableIdentity.IsVisible">
             <summary>
             Is the marker visible at current frame ?
             </summary>
             <value><c>true</c> if this instance is visible; otherwise, <c>false</c>.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackableIdentity.OnVisibilityChange">
             <summary>
             Unity event : on object's visibility change.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.TrackableIdentity.InternalVisibleChangeEvent">
             <summary>
             Internal visible change event.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackableIdentity.allTrackableIdentities">
             <summary>
             static list : all trackable identities.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackableIdentity.m_TrackedInfo">
             <summary>
             Tracked info, updated per frame.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableIdentity.VerboseLog">
             <summary>
             If true, log verbose per frame tracking information.
             </summary>
             <value><c>true</c> if verbose log; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableIdentity.ConfigInfo">
             <summary>
             Gets the config info.
             </summary>
             <value>The config info.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableIdentity.MarkerConfigSize">
             <summary>
             Gets the marker config size.
             </summary>
             <value>The size of the marker config.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableIdentity.Tilt">
             <summary>
             Pre tilt Qoffset to make the rotation right.
             </summary>
             <value>The tilt.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.TrackableIdentity.UpdateTrackedInfo">
             <summary>
             Internal method , called by tracking engine.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.AddUnduplicate``1(System.Collections.Generic.List{``0},``0)">
             <summary>
             Adds item if the item not exists in the list.
             </summary>
             <returns>The if not exists.</returns>
             <param name="genericList">Generic list.</param>
             <param name="item">Item.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.AddUnduplicate``1(System.Collections.Generic.HashSet{``0},``0)">
             <summary>
             Adds item if the item not exists in the hashset.
             </summary>
             <returns>The if not exists.</returns>
             <param name="genericList">Generic list.</param>
             <param name="item">Item.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.AddRangeUnduplicate``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Adds items for those not exists in the list.
             </summary>
             <returns>How many items added.</returns>
             <param name="genericList">Generic list.</param>
             <param name="items">Items.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.ForEach``1(``0[],System.Action{``0})">
             <summary>
             Loops on each element on a postive direction (starts from zero);
             Warning: ForEach 中如果传入匿名委托会导致GC !
             </summary>
             <param name="genericArray">Generic array.</param>
             <param name="action">Action.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.ForEachReversed``1(``0[],System.Action{``0})">
             <summary>
             Loops on each element on a reversed direction (starts from max-index);
             </summary>
             <returns>How many items added.</returns>
             <param name="genericList">Generic list.</param>
             <param name="items">Items.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.Count``1(``0[],``0)">
             <summary>
             Counts how many item exists in genericArray
             </summary>
             <param name="genericArray">Generic array.</param>
             <param name="item">Item.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.Contains``1(``0[],``0)">
             <summary>
             Contains the specified genericArray and item.
             </summary>
             <param name="genericArray">Generic array.</param>
             <param name="item">Item.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.FindIndex``1(``0[],``0)">
             <summary>
             Finds the index of item.
             </summary>
             <returns>The index.</returns>
             <param name="array">Array.</param>
             <param name="item">Item.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.ForEachChildren(UnityEngine.Transform,System.Action{UnityEngine.Transform},System.Boolean)">
             <summary>
             Actions on each children. In deepHierarchy = false, function run on direct children, else if true, actions is guaranteed to run on each sub children.
             function's parameter is the children gameobject at the loop.
             </summary>
             <param name="fn">Fn.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.ForEachChildren(UnityEngine.GameObject,System.Action{UnityEngine.Transform},System.Boolean)">
             <summary>
             Actions on each children. In deepHierarchy = false, function run on direct children, else if true, actions is guaranteed to run on each sub children.
             function's parameter is the children gameobject at the loop.
             </summary>
             <param name="fn">Fn.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.ForEachChildren(UnityEngine.SceneManagement.Scene,System.Action{UnityEngine.Transform},System.Boolean)">
             <summary>
             Actions on each children. In deepHierarchy = false, function run on direct children, else if true, actions is guaranteed to run on each sub children.
             function's parameter is the children gameobject at the loop.
             </summary>
             <param name="fn">Fn.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.MarkerInfo">
             <summary>
             marker info from LLAPI.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerInfo.isTracked">
             <summary>
             Is marker tracked ?
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerInfo.Position">
             <summary>
             The tracked position.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerInfo.Rotation">
             <summary>
             The tracked rotation.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerInfo.Timestamp">
             <summary>
             The timestamp.
             </summary>
            </member>
        <member name="T:Ximmerse.RuntimeCalibration.Internal.CalibratedLayout">
             <summary>
             This script inputs a calibrated layout file (*.bytes) and regenerate the layout file in unity.
             This script is intend to be used in Unity Editor only.
             </summary>
            </member>
        <member name="P:Ximmerse.RuntimeCalibration.Internal.CalibratedLayout.calibrationFilePath">
             <summary>
             Gets or sets the calibration file path.
             </summary>
             <value>The calibration file.</value>
            </member>
        <member name="F:Ximmerse.RuntimeCalibration.Internal.CalibratedLayout.layoutData">
             <summary>
             The layout data.
             </summary>
            </member>
        <member name="P:Ximmerse.RuntimeCalibration.Internal.CalibratedLayout.dataSourceType">
             <summary>
             Gets or sets the type of the data source.
             </summary>
             <value>The type of the data source.</value>
            </member>
        <member name="P:Ximmerse.RuntimeCalibration.Internal.CalibratedLayout.SpawnedPrefab">
             <summary>
             Gets or sets the spawned prefab.
             </summary>
             <value>The spawned prefab.</value>
            </member>
        <member name="P:Ximmerse.RuntimeCalibration.Internal.CalibratedLayout.CenterAnchor">
             <summary>
             Gets the center anchor.
             </summary>
             <value>The center anchor.</value>
            </member>
        <member name="P:Ximmerse.RuntimeCalibration.Internal.CalibratedLayout.AutoRegenerate">
             <summary>
             Gets or sets a value indicating whether this
             <see cref="T:Ximmerse.RuntimeCalibration.Internal.CalibratedLayout" /> auto regenerate.
             </summary>
             <value><c>true</c> if auto regenerate; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:Ximmerse.RuntimeCalibration.Internal.CalibratedLayout.RegenerateLayout">
             <summary>
             Regenerates the layout.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.DynamicTarget">
             <summary>
             Default trackable behaviour, updates trackable object's transform at the head space per-frame.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.DynamicTarget.trackableIdentity">
             <summary>
             Gets the trackable identity.
             </summary>
             <value>The trackable identity.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DynamicTarget.DebugView">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Ximmerse.RhinoX.DynamicTarget" /> debug view.
             </summary>
             <value><c>true</c> if debug view; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DynamicTarget.DrawColor">
             <summary>
             Gets or sets the color of the color to draw debug view.
             </summary>
             <value>The color of the debug.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DynamicTarget.PrintDetailTrackedData">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Ximmerse.RhinoX.DynamicTarget" /> print detail
             tracked data.
             </summary>
             <value><c>true</c> if print detail tracked data; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.DynamicTarget.UpdateDynamicTargetPose">
             <summary>
             updates dynamic target 
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.AIOEventType">
             <summary>
             AIO device event type.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.AIOThermalLevel">
             <summary>
             thermal level : which level the thermal event indicates.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.AIOThermalZone">
             <summary>
             For kEventThermal event : which area does the thermal event points to.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.AIOEvent">
             <summary>
             AIO event : device status event. Application may catch this event for device management.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.ObjectTracking">
             <summary>
             Object tracking : access tag tracking interface.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ObjectTracking.GetAnchorNode(Ximmerse.RhinoX.AnchorNode)">
             <summary>
             Gets the transform by AnchorMode.
             </summary>
             <returns>The node.</returns>
             <param name="anchor">Anchor.</param>
            </member>
        <member name="P:Ximmerse.RhinoX.ObjectTracking.TrackingAnchorPose">
             <summary>
             Gets the get tracking anchor global pose.
             </summary>
             <value>The get tracking anchor pose.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.ObjectTracking.GetTrackableTransform(System.Int32,UnityEngine.Transform,UnityEngine.Vector3@,UnityEngine.Quaternion@)">
             <summary>
             Gets the trackable object's position and rotation, in the tracking anchor space.
             </summary>
             <returns><c>true</c>, if marker was tracked, <c>false</c> otherwise.</returns>
             <param name="TrackableID">Trackable unique ID.</param>
             <param name="trackingAnchor">Tracking anchor.</param>
             <param name="Position">Position.</param>
             <param name="Rotation">Rotation.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ObjectTracking.GetTrackableRawData(System.Int32,UnityEngine.Vector3@,UnityEngine.Quaternion@,System.UInt64@)">
             <summary>
             Gets the raw data from low level tracking system.
             </summary>
             <returns><c>true</c>, if trackable object is currently being tracked, <c>false</c> otherwise.</returns>
             <param name="TrackableID">Trackable identifier.</param>
             <param name="Position">Position.</param>
             <param name="Rotation">Rotation.</param>
             <param name="timestamp">Timestamp.</param>
            </member>
        <member name="P:Ximmerse.RhinoX.ObjectTracking.VPUTrackingAnchorPosition">
             <summary>
             Gets/Sets the VPU tracking anchor position.
             </summary>
             <value>The update VPUT racking anchor position.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ObjectTracking.VPUTrackingAnchorEuler">
             <summary>
             Gets/Sets the VPU tracking anchor euler angles..
             </summary>
             <value>The update VPUT racking anchor position.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ObjectTracking.CurrentProfile">
             <summary>
             Sets the current used tracking profile.
             </summary>
             <value>The current profile.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.ObjectTracking.GetMarkerConfigInfo(System.Int32,Ximmerse.RhinoX.MarkerConfigInfo@)">
             <summary>
             Gets the marker config info.
             </summary>
             <returns><c>true</c>, if marker config info was gotten, <c>false</c> otherwise.</returns>
             <param name="ObjectID">Marker identifier.</param>
             <param name="configInfo">Config info.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ObjectTracking.LoadMarkerProfile(Ximmerse.RhinoX.ObjectTrackingProfile)">
             <summary>
             Loads the marker profile at runtime. 
             Note: this operation will unload the already loaded profile.
             </summary>
             <param name="TrackingProfile">Object Tracking Profile.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.ControllerWrap">
             <summary>
             Internal wrapper controller codes represents a controller.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.Rotation">
             <summary>
             Gets the rotation of the input controller.
             </summary>
             <value>The rotation.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.RawRotation">
             <summary>
             Gets the raw rotation of the input controller.
             </summary>
             <value>The rotation.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.Gyroscope">
             <summary>
             Gets the gyroscope (angular speed in degree)
             </summary>
             <value>The gyroscope.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.Acceleration">
             <summary>
             Gets the acceleration value in meter/(sec * sec)
             </summary>
             <value>The acceleration.</value>
            </member>
        <member name="E:Ximmerse.RhinoX.ControllerWrap.OnConnect">
             <summary>
             Event : on controller is connected. Parameter = index.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ControllerWrap.#ctor(Ximmerse.RhinoX.InternalControllerIndex)">
             <summary>
             Initializes a new instance of the <see cref="T:Ximmerse.AIOSDK.ControllerWrap" /> class.
             </summary>
             <param name="ctrlIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ControllerWrap.Vibrate(System.Int32,System.Single)">
             <summary>
             Vibrate the controller of index with specified strength, duration.
             </summary>
             <param name="strength">Strength.</param>
             <param name="duration">Duration.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ControllerWrap.RecenterControllerRotation(System.Single)">
             <summary>
             Recenter the controller's IMU rotation by given yaw.
             </summary>
             <param name="Yaw">Yaw.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ControllerWrap.Update">
             <summary>
             Update this controller.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.RXRaycaster">
             <summary>
             Rhino-X raycaster.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.Focus">
             <summary>
             Gets the focus gameobject that this raycaster is current targeting.
             </summary>
             <value>The focus.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycaster.m_LatestHit">
             <summary>
             The latest hit gameObject
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.LatestHit">
             <summary>
             Gets the latest hit gameobject that this raycaster is current targeting.
             </summary>
             <value>The focus.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.CullingMask">
             <summary>
             Culling mask of interaction object. By default, interaction with Ui object.
             </summary>
             <value>The culling mask.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.RaycastDistance">
             <summary>
             Raycast distance
             </summary>
             <value>The culling mask.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.ControllerIndex">
             <summary>
             Controller index that this raycaster bounds to .
             </summary>
             <value>The controller identifier.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycaster.rayCastHitInfo">
             <summary>
             The raycast hit info.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.IsPointerDown">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.RXRaycaster" /> is pointer down.
             </summary>
             <value><c>true</c> if is pointer down; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.IsPointerUp">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.RXRaycaster" /> is pointer up.
             </summary>
             <value><c>true</c> if is pointer up; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.IsPointerTap">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.RXRaycaster" /> is pointer tap.
             </summary>
             <value><c>true</c> if is pointer tap; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.IsPointerPressed">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.RXRaycaster" /> is pointer pressed.
             </summary>
             <value><c>true</c> if is pointer pressed; otherwise, <c>false</c>.</value>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrEventType">
             <summary>
             SVR event type : define the event type of LLAPI.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrThermalZone">
             <summary>
             Svr thermal event : which area does the thermal event points to.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrThermalLevel">
             <summary>
             Svr thermal event : which level the thermal event indicates.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrEventData_Thermal">
             <summary>
             Svr thermal event data.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrEventData">
             <summary>
             Svr event data.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrEvent">
             <summary>
             Svr event: define data structure for polling event from LLAPI to HLAPI.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.SvrEvent.eventType">
             <summary>
             Event type
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.SvrEvent.deviceId">
             <summary>
             An identifier for the device that generated the event (0 == HMD)
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.SvrEvent.eventData">
             <summary>
             Event data.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.CompositeGroundPlane">
             <summary>
             Composite ground plane : composite of multiple ground plane to align the head pose.
             Composite ground plane should be singleton in your scene.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.CompositeGroundPlane.RecenterMode">
             <summary>
             Recenter behaviour mode.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CompositeGroundPlane.RecenterMode.Everyframe">
             <summary>
             Tries to recenter head everyframe, as long as the ground plane object is tracked.
             This is the default mode;
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CompositeGroundPlane.RecenterMode.FixedInterval">
             <summary>
             Try to recenter in a fixed time interval.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CompositeGroundPlane.DataSourceType.FileSystem">
             <summary>
             Read calibration file from file system path
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CompositeGroundPlane.DataSourceType.EmbedObject">
             <summary>
             Use embed binray file
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.CompositeGroundPlane.CalibrationFile">
             <summary>
             Gets or sets the calibration file , which should be a text asset object.
             </summary>
             <value>The calibration file.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.CompositeGroundPlane.calibrationFilePath">
             <summary>
             Gets or sets the calibration file path.
             </summary>
             <value>The calibration file.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.CompositeGroundPlane.MotherboardID">
             <summary>
             Gets the center ground plane identifier, which is trackableIdentity component's id.
             </summary>
             <value>The center ground plane identifier.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.CompositeGroundPlane.m_ChildrenID">
             <summary>
             The children ground planes identifier.
             Values are assigned at runtime, after read from layout binaries.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.CompositeGroundPlane.ChildrenID">
             <summary>
             Gets the configurated children ground planes identifier.
             </summary>
             <value>The children identifier.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.CompositeGroundPlane.m_TrackedInfos">
             <summary>
             The tracked infos of each plane (include mother board).
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.CompositeGroundPlane.VPUFrameDelay">
             <summary>
             Gets or sets the delay time from rendering to VPU.
             </summary>
             <value>The backward time.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.CompositeGroundPlane.MinErrorHeadDistance">
             <summary>
             The minimum error head span.
             对齐时候允许头部对齐动作的最小距离.
             </summary>
             <value>The minimum error head span.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.CompositeGroundPlane.m_MinErrorHeadDistance">
             <summary>
             The minimum error head span distance
             对齐时候允许头部对齐动作的最小距离.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CompositeGroundPlane.m_MinErrorHeadDiffAngle">
             <summary>
             The minimum error head diff angle
             对齐时候允许头部对齐动作的最小误差角度.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.CompositeGroundPlane.DataType">
             <summary>
             Gets or sets the type of the calibration data.
             </summary>
             <value>The type of the data.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.CompositeGroundPlane.calibrationRecords">
             <summary>
             The calibration records.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CompositeGroundPlane.m_IsCalibrated">
             <summary>
             Is the ground plane well-calibrated ?
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.CompositeGroundPlane.DebugView">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Ximmerse.RhinoX.CompositeGroundPlane" /> debug view.
             </summary>
             <value><c>true</c> if debug view; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.CompositeGroundPlane.recenterMode">
             <summary>
             Gets or sets the recenter mode.
             </summary>
             <value>The recenter mode.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.CompositeGroundPlane.MinErrorHeadDiffAngle">
             <summary>
             Gets or sets the minimum error head diff angle.
             </summary>
             <value>The minimum error head diff angle.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.CompositeGroundPlane.trackedInfo">
             <summary>
             The most fit tracked data (children or mother) for head recentering.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CompositeGroundPlane.LatestAlignedChildID">
             <summary>
             The current aligned child identifier.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.CompositeGroundPlane.ForceRecenter">
             <summary>
             Forces the composite ground plane to recenter.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.CompositeGroundPlane.InitializeCalibrationRecord">
             <summary>
             Parse the layout binaries file.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.CompositeGroundPlane.CollectChildrenMakerInfos">
             <summary>
             Collects the children maker infos.
             Output all children's tracked info to m_TrackedInfos. 
             The script depends on the m_TrackedInfos to decide which children plane to be used for recentering.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.CompositeGroundPlane.GetBestFitMarker(Ximmerse.RhinoX.MarkerTrackedInfo@)">
             <summary>
             Gets the best fit marker to be used to recentering.
             For now, the condition is nearest distance means best tracking quality.
             </summary>
             <returns><c>true</c>, if best fit marker was gotten, <c>false</c> otherwise.</returns>
             <param name="markerInfo">Marker info.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.CompositeGroundPlane.ConvertBestFitMarkerToMotherBoardMarker(Ximmerse.RhinoX.MarkerTrackedInfo)">
             <summary>
             Converts the best fit marker to mother board marker.
             </summary>
             <returns>The best fit marker to mother board marker.</returns>
             <param name="markerInfo">Marker info.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.CompositeGroundPlane.TryRecenterHead">
             <summary>
             Tries Recenter head.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.CompositeGroundPlane.RecenterHead(UnityEngine.Vector3,UnityEngine.Quaternion)">
             <summary>
             Recenters the head.
             </summary>
             <param name="targetPoint">Target point.</param>
             <param name="targetRotation">Target rotation.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.CompositeGroundPlane.DrawDebugGizmos">
             <summary>
             Draws the debug gizmos.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.CompositeGroundPlane.GetTilt(System.Int32)">
             <summary>
             Pre tilt Qoffset to make the rotation right.
             </summary>
             <value>The tilt.</value>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.PEUtils">
             <summary>
             Polyengine utils.
             PolyEngine 工具类方法。
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.UIntFloat.ToDouble(System.UInt64)">
             <summary>
             Converts ulong to double.
             </summary>
             <returns>The double.</returns>
             <param name="value">Value.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.AddToArray``1(``0,``0[])">
             <summary>
             Adds element to an array.
             </summary>
             <returns>The to array.</returns>
             <param name="element">Element.</param>
             <param name="Array">Array.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.RemoveFromArray``1(System.Int32,``0[])">
             <summary>
             Removes the index from array and return new array
             </summary>
             <returns>The from array.</returns>
             <param name="index">Index.</param>
             <param name="Array">Array.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.RemoveFromArray``1(``0,``0[])">
             <summary>
             Removes element from array.
             </summary>
             <returns>The from array.</returns>
             <param name="element">Element.</param>
             <param name="Array">Array.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.InsideUnitCircle">
             <summary>
             返回一个 vector3 的 单位元随机向量。
             </summary>
             <returns>The unit circle.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.Include``1(``0[],``0)">
             <summary>
             Check if arrays includes the value
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.RandomRange(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get random vector3 between [min] .. [max]
             </summary>
             <returns>The range.</returns>
             <param name="min">Minimum.</param>
             <param name="max">Max.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.RandomRange(UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             Get random vector2 between [min] .. [max]
             </summary>
             <returns>The range.</returns>
             <param name="min">Minimum.</param>
             <param name="max">Max.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetPhysicalDistanceOfScreenSpace(System.Single)">
             <summary>
             Gets the distance measured in sreen pixel space. Returned distance is measured in meters.
             </summary>
             <returns>The distance of screen points.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetActualDPI(System.Single@)">
             <summary>
             Gets the actual DPI.
             Always return true if not running on Android.
             When running on android, try getting DPI from native java class, if failed, using Screen.dpi and return false.
             </summary>
             <returns><c>true</c>, if actual DP was gotten, <c>false</c> otherwise.</returns>
             <param name="dpi">Dpi.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetPhysicalScreenSize(System.Single@,System.Single@)">
             <summary>
             Gets the size of the physical screen.
             return false if fail to get current DPI.
             useDensityDpiInAnroid : refer to file:///Applications/Unity/Documentation/en/ScriptReference/Screen-dpi.html
             If useDensityDpiInAnroid = true, use Screen.dpi in calculation, else use native java class interface to get a more precise DPI in calculation.
             </summary>
             <returns><c>true</c>, if physical screen size was gotten, <c>false</c> otherwise.</returns>
             <param name="w">The width.</param>
             <param name="h">The height.</param>
             <param name="useDensityDpiInAnroid">If set to <c>true</c> use density dpi in anroid.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetRandom``1(System.Collections.Generic.List{``0})">
             <summary>
             Gets a random element from list. 
             </summary>
             <returns><c>true</c>, if random was gotten, <c>false</c> otherwise.</returns>
             <param name="list">List.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ShuffleList``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32})">
             <summary>
             Shuffle a list.
             </summary>
             <param name="list"></param>
             <typeparam name="T"></typeparam>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetRandom``1(System.Collections.Generic.List{``0},System.Boolean)">
             <summary>
             Gets a random element from list.
             if [dropTheIndex] = true, the list will remove the chosen element
             </summary>
             <returns><c>true</c>, if random was gotten, <c>false</c> otherwise.</returns>
             <param name="list">List.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetXZDistance(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             获得p1,p2两点在XZ平面上的Distance
             </summary>
             <returns>The XZ sqr distance.</returns>
             <param name="p1">P1.</param>
             <param name="p2">P2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetXZSqrDistance(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             获得p1,p2两点在XZ平面上的Sqr Distance
             </summary>
             <returns>The XZ sqr distance.</returns>
             <param name="p1">P1.</param>
             <param name="p2">P2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.Exists``1(``0[],``0)">
             <summary>
             Check element exists at array
             </summary>
             <param name="array">Array.</param>
             <param name="element">Element.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.CalculateFacingAngleXZ(UnityEngine.Transform,UnityEngine.Vector3)">
             <summary>
             计算transform.forward到 targetPosition 的夹角。
             只考虑XZ平面的夹角。
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ClampScalar(System.Single,System.Single)">
             <summary>
             Clamps the scalar.
             限制 single 的长度不大于 Scalar， 返回符号 = single 的浮点值.
             </summary>
             <returns>The scalar.</returns>
             <param name="single">Single.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.Clamp(UnityEngine.Rect,UnityEngine.Vector2)">
             <summary>
             Clamps the vect2 in rect bounds.
             </summary>
             <returns>The rect vect2.</returns>
             <param name="rect">Rect.</param>
             <param name="point">Point.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ZipAngle(System.Single)">
             <summary>
             把一个 0 - 360之间的代表角度的4个长度的float压缩为一个2个长度的 short。
             </summary>
             <returns>The angle.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ZipDirection(UnityEngine.Vector3)">
             <summary>
             用一个 Vector2 表示一个方向.
             Vector2.x = 方向的Yaw角度。
             Vector2.y = 方向的Pitch角度。
             </summary>
             <returns>The direction.</returns>
             <param name="Direction">Direction.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ZipDirection(UnityEngine.Quaternion)">
             <summary>
             把 Rotation 压缩成 Vector2. X = Yaw, Y = Pitch, 忽略 Roll
             </summary>
             <returns>The direction.</returns>
             <param name="rotation">Rotation.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.UnzipDirection(UnityEngine.Vector2)">
             <summary>
             ZipDirection 的反函数. 把一个压缩过的 Dir 还原.
             只能还原 Yaw 和 Pitch, 不适用于带 Roll 的方向。
             </summary>
             <returns>The direction.</returns>
             <param name="zippedVect">Zipped vect.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ZipXZDirection(UnityEngine.Vector3)">
             <summary>
             压缩一个 Direction : 把Direction投影到XZ面，用一个 Float 表示 XZ 投影向量和 (1,0)的角度
             </summary>
             <returns>The direction flatten.</returns>
             <param name="Direction">Direction.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.UnzipXZDirection(System.Single)">
             <summary>
             ZipXZDirection 的反函数 。 把一个 angle 还原为一个 Vector3 方向.
             </summary>
             <returns>The XZ direction.</returns>
             <param name="angle">Angle.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.RandomExcept``1(``0[],``0)">
             <summary>
             Get a random value from array, the result will exclude %excludeValue% for sure.
             If the array has only one element, then there is no choice - result will be the only element.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.CloneExcept``1(``0[],``0)">
             <summary>
             Clone an array, exclude the "except"
             </summary>
             <param name="array"></param>
             <param name="except"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindRoamingPointOnXZSurface(UnityEngine.AI.NavMeshAgent,System.Single,System.Single,UnityEngine.Vector3,System.Int32,System.Single)">
             <summary>
             在 XZ Surface 水平平面上随机获取一个 Nav Point。
             随机失败前提：
             - 距离太近
             - 得不到 navmesh 点。
             </summary>
             <returns>The roaming point on XZ surface.</returns>
             <param name="Radius">Radius.</param>
             <param name="CenterPosition">Center position.</param>
             /// <param name="MaxTry">Max try count.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindClosest(System.Collections.Generic.IEnumerable{UnityEngine.Component},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the closest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindClosest``1(System.Collections.Generic.List{``0},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the closest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindClosestGameObject(System.Collections.Generic.List{UnityEngine.GameObject},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the closest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindClosest(System.Collections.Generic.IEnumerable{UnityEngine.GameObject},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the closest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindFarest(System.Collections.Generic.IEnumerable{UnityEngine.Transform},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the farest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindFarest(System.Collections.Generic.IEnumerable{UnityEngine.GameObject},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the farest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindChildByPath(UnityEngine.Transform,System.String,System.Boolean)">
             <summary>
             Finds the child by given path.
             This method supports recursive path .
             </summary>
             <returns>The child path.</returns>
             <param name="parent">Parent.</param>
             <param name="Path">Path. For example: "root/skin/weapon"</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindClosest(System.Collections.Generic.IEnumerable{UnityEngine.Vector3},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the closest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindFarest(System.Collections.Generic.IEnumerable{UnityEngine.Vector3},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the farest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ToXZDirection(UnityEngine.Vector3,System.Boolean)">
             <summary>
             Convert world direction to xz surface direction.
             </summary>
             <returns>The XZ direction.</returns>
             <param name="direction">Direction.</param>
             <param name="normalized">If set to <c>true</c> normalized.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ToXYZ(UnityEngine.Vector2,System.Single)">
             <summary>
             Converts XZ vector to XYZ. (Y is pass as parameter, default = 0)
             </summary>
             <returns>The to XY.</returns>
             <param name="xzVector">Xz vector.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ToXZ(UnityEngine.Vector3)">
             <summary>
             把3D坐标转换为2D (XZ)坐标。
             </summary>
             <returns>The X.</returns>
             <param name="pos3D">Pos3 d.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ToXY(UnityEngine.Vector3)">
             <summary>
             把3D坐标转换为2D (XY)坐标。
             </summary>
             <returns>The X.</returns>
             <param name="pos3D">Pos3 d.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetRandom``1(System.Collections.Generic.List{``0},System.Int32)">
             <summary>
             从 list 列表中，随机抽取 count 个元素组成一个新的列表返回.
             </summary>
             <returns>The pick.</returns>
             <param name="list">List.</param>
             <param name="count">Count.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetRandom``1(System.Collections.Generic.List{``0},System.Int32,System.Collections.Generic.List{``0}@)">
             <summary>
             从 list 列表中，随机抽取 count 个元素组成一个新的列表返回.
             </summary>
             <returns>The pick.</returns>
             <param name="list">List.</param>
             <param name="count">Count.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.RandomPointOnPlane(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
             <summary>
             给出一个 Plane，获取以 Position, Normal 定义的Plane， 半径为radius 的随机点
             </summary>
             <returns>The point on plane.</returns>
             <param name="position">Position.</param>
             <param name="normal">Normal.</param>
             <param name="radius">Radius.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.AlignByChildTransform(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
             <summary>
             给出 RootTransform 和 其下的一个 childTransform, 放置rootTransform, 得出的结果是 childTransform 和 TargetMatrix 对齐
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.TestContain(UnityEngine.Collider,UnityEngine.Vector3)">
             <summary>
             Tests the point is contained inside the collider.
             </summary>
             <returns><c>true</c>, if is contained was tested, <c>false</c> otherwise.</returns>
             <param name="collider">Collider.</param>
             <param name="Position">Position.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.WriteFloat(System.Single,System.Byte[],System.Int32)">
             <summary>
             Writes the float to the buffer from start index, length = 4.
             </summary>
             <param name="floatValue">Float value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ReadFloat(System.Byte[],System.Int32)">
             <summary>
             Reads the float from buffer at start index, length = 4.
             </summary>
             <returns>The float.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.WriteVector2(UnityEngine.Vector2,System.Byte[],System.Int32)">
             <summary>
             Writes the vector2 to the buffer from start index, length = 8.
             </summary>
             <param name="vect2">Vector2 value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ReadVector2(System.Byte[],System.Int32)">
             <summary>
             Reads the vector2 from buffer at start index, length = 8.
             </summary>
             <returns>The vector2.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.WriteVector3(UnityEngine.Vector3,System.Byte[],System.Int32)">
             <summary>
             Writes the vector3 to the buffer from start index, length = 12.
             </summary>
             <param name="vect3">Vector3 value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ReadVector3(System.Byte[],System.Int32)">
             <summary>
             Reads the vector3 from buffer at start index, length = 12
             </summary>
             <returns>The vector3.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.WriteVector4(UnityEngine.Vector4,System.Byte[],System.Int32)">
             <summary>
             Writes the vector4 to the buffer from start index, length = 16.
             </summary>
             <param name="vect4">Vector4 value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.WriteQuaternion(UnityEngine.Quaternion,System.Byte[],System.Int32)">
             <summary>
             Writes the quaternion to the buffer from start index, length = 16.
             </summary>
             <param name="q">Quaternion value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ReadVector4(System.Byte[],System.Int32)">
             <summary>
             Reads the vector4 from buffer at start index, length = 16
             </summary>
             <returns>The vector4.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ReadQuaternion(System.Byte[],System.Int32)">
             <summary>
             Reads the quaternion from buffer at start index, length = 16
             </summary>
             <returns>The vector4.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.WriteInt(System.Int32,System.Byte[],System.Int32)">
             <summary>
             Writes the int to the buffer from start index, length = 4.
             </summary>
             <param name="intValue">Int value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ReadInt(System.Byte[],System.Int32)">
             <summary>
             Reads the int from buffer at start index, length = 4
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ReadUInt64(System.Byte[],System.Int32)">
             <summary>
             Reads a ulong from buffer.
             </summary>
             <returns>The long.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ReadDouble(System.Byte[],System.Int32)">
             <summary>
             Reads the double from buffer at start index, length = 8
             </summary>
             <returns>The double.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.WriteULong(System.UInt64,System.Byte[],System.Int32)">
             <summary>
             Write the specified ulong value.
             </summary>
             <param name="value">Value.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.WriteDouble(System.Double,System.Byte[],System.Int32)">
             <summary>
             Writes the double.
             </summary>
             <param name="value">Value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.SDKVersion">
             <summary>
             SDK version.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.SDKVersion.VIOVersion">
             <summary>
             The VIO version.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.SDKVersion.FPGAVersion">
             <summary>
             The FPGA version.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.SDKVersion.AlgorithmVersion">
             <summary>
             The object tracking algorithm version.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.SDKVersion.TagTrackingSDKVerison">
             <summary>
             The tag tracking SDK verison.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.RhinoXSystem">
             <summary>
             RhinoX system : access system software and hardware information.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.RhinoXSystem.AIO_Event">
             <summary>
             Event for application to catch. By this event, application can response to AIO system event.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.OnSvrEvent(Ximmerse.RhinoX.Internal.SvrEvent)">
             <summary>
             Internal API : expose for application work on listened AIO event.
             </summary>
             <param name="_event">Event.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.GetUnwarpMeshOffset(System.Single@,System.Single@)">
             <summary>
             Gets the unwarp mesh offset : X is the horizontal offset, Y is the vertical offset.
             </summary>
             <param name="OffsetX">Offset x.</param>
             <param name="OffsetY">Offset y.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.SetUnwarpMeshOffset(System.Single,System.Single,System.Single)">
             <summary>
             Sets the unwarp mesh offset X and Y : X is the horizontal offset, Y is the vertical offset.
             </summary>
             <param name="OffsetX_left">Offset x left.</param>
             <param name="OffsetX_right">Offset x right.</param>
             <param name="OffsetY">Offset y.</param>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.IsVPUStarted">
             <summary>
             Is VPU module started ?
             </summary>
             <value><c>true</c> if is VPUC onnected; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.TagTrackingSDKVerison">
             <summary>
             Gets the algorithm version.
             </summary>
             <value>The algorithm version.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.SdkVersion">
             <summary>
             Gets the sdk version information.
             </summary>
             <value>The sdk version.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.VIOVersion">
             <summary>
             Gets the VIO library ersion.
             </summary>
             <value>The VIOSDKV ersion.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.FPGAVersion">
             <summary>
             Gets the FPGA version.
             </summary>
             <value>The FPGAV ersion.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.AlgorithmVersion">
             <summary>
             Gets the algorithm version.
             </summary>
             <value>The algorithm version.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.GetHeadTrackingSystemTimestamp">
             <summary>
             Gets the head tracking system nano time.
             </summary>
             <returns>The SVRT IME.</returns>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.EnableVPUPowerSaving">
             <summary>
             Enables VPU power saving mode. 
             When true, VPU works in lower scanning frequency to save power.
             </summary>
             <value><c>true</c> if enable VPUP ower saving; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.MaxPredictTime">
             <summary>
             Gets or sets the max predict time for low level tracking system.
             </summary>
             <value>The max predict time.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.RecenterOrientation(System.Boolean)">
             <summary>
             Recenters the orientation.
             </summary>
             <param name="YawOnly">If set to <c>true</c>, only recenter yaw.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.GetHeadTrackedPose(UnityEngine.Vector3@,UnityEngine.Quaternion@,System.Boolean)">
             <summary>
             Gets the up-to-date device space head tracked pose of the current frame.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.CalibrationOutputRecord">
             <summary>
             Calibration output record.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.ControllerRawAxis">
             \enum ControllerRawAxis
             \brief Device raw axis definition
             \see https://msdn.microsoft.com/en-us/library/windows/apps/microsoft.directx_sdk.reference.xinput_gamepad
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.ControllerRawButton">
             \enum ControllerRawButton
             \brief Device raw button definition
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.ControllerAxis">
             \enum ControllerAxis
             \brief Controller axis definition
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.ControllerButton">
             \enum ControllerButton
             \brief Controller Button definition
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.DeviceConnectionState">
             \enum DeviceConnectionState
             \brief The connection status of the host to the device
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceConnectionState.Disconnected">
             <summary>
             Indicates that the device is disconnected.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceConnectionState.Scanning">
             <summary>
             Indicates that the host is scanning for devices.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceConnectionState.Connecting">
             <summary>
             Indicates that the device is connecting.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceConnectionState.Connected">
             <summary>
             Indicates that the device is connected.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceConnectionState.Error">
             <summary>
             Indicates that an error has occurred.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.TrackingResult">
             \enum TrackingResult
             \brief Tracking status
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.TrackingResult.RotationTracked-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.TrackingResult.PositionTracked-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.TrackingResult.PoseTracked-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.TrackingResult.RotationEmulated-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.TrackingResult.PositionEmulated-->
        <member name="T:Ximmerse.RhinoX.Internal.XimmerseButton">
             \enum XimmerseButton
             \brief Tracking status
            </member>
        <member name="T:Ximmerse.RhinoX.RuntimeCalibrationEntity">
             <summary>
             Runtime calibration entry.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RuntimeCalibrationEntity.DontSerialize">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Ximmerse.RhinoX.RuntimeCalibrationEntity" /> dont serialize.
             </summary>
             <value><c>true</c> if dont serialize; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RuntimeCalibrationEntity.IsCalibrated">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:RuntimeCalibrationEntry" /> is calibrated.
             </summary>
             <value><c>true</c> if is calibrated; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RuntimeCalibrationEntity.MotherToLocal">
             <summary>
             Matrix : mother 2 me.
             The value will be assigned when calibration is done.
             </summary>
             <value>The mother2 me matrix.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RuntimeCalibrationEntity.LocalToMother">
             <summary>
             Matrix : me 2 mother .
             The value will be assigned when calibration is done.
             </summary>
             <value>The me2 mother matrix.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RuntimeCalibrationEntity.IsMotherBoard">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Ximmerse.RhinoX.RuntimeCalibrationEntity" /> is
             mother board.
             </summary>
             <value><c>true</c> if is mother board; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RuntimeCalibrationEntity.IsTracked">
             <summary>
             Gets a value indicating whether this <see cref="T:RuntimeCalibrationEntry" /> is tracked.
             </summary>
             <value><c>true</c> if is tracked; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.RuntimeCalibrationEntity.UpdateCalibration(Ximmerse.RhinoX.RuntimeCalibrationEntity)">
             <summary>
             Updates the calibration.
             更新对另一个已经标定的对象的标定数据. 要求 other 在调用此方法的时候可见, 并且 other 一定要是已经标定好的.
             返回一个 代表标定完成度的 normalized 的值。
             </summary>
             <param name="other">Other.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RuntimeCalibrationEntity.SerializeFramesToBytes">
             <summary>
             Serialize the frame data of this entity to byte[]
             </summary>
             <returns>The to bytes.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RuntimeCalibrationEntity.SerializeMatricesToBytes">
             <summary>
             Serializes the matrices data to bytes.
             </summary>
             <returns>The matrices to bytes.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RuntimeCalibrationEntity.CalculateMatrix(Ximmerse.RhinoX.RuntimeCalibrationEntity)">
             <summary>
             Calculates the matrix data.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrResult">
             <summary>
             Svr result.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.CalibrateResult">
             <summary>
             Calibrate result.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.TrackableSpaceCalibrationManager">
             <summary>
             Trackable space calibration manager.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableSpaceCalibrationManager.MotherBoardID">
             <summary>
             Gets or sets the mother board identifier.
             </summary>
             <value>The mother board identifier.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableSpaceCalibrationManager.ChildrenBoards">
             <summary>
             Gets or sets the children board identifier.
             </summary>
             <value>The children board identifier.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackableSpaceCalibrationManager.m_CenterEntry">
             <summary>
             The center entry
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackableSpaceCalibrationManager.visibleEntities">
             <summary>
             The visible entities per frame.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableSpaceCalibrationManager.IsCalibreated">
             <summary>
             Gets or sets a value indicating whether this
             <see cref="T:Ximmerse.RhinoX.TrackableSpaceCalibrationManager" /> is calibreated.
             </summary>
             <value><c>true</c> if is calibreated; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableSpaceCalibrationManager.SerializationPath">
             <summary>
             Gets or sets the serialization path.
             </summary>
             <value>The serialization path.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackableSpaceCalibrationManager.m_MarkTimestamp">
             <summary>
             If true, marks the file name with timestamp.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableSpaceCalibrationManager.MarkTimestamp">
             <summary>
             If true, marks the file name with timestamp.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.TrackableSpaceCalibrationManager.CreateRuntimeObjects">
             <summary>
             Creates the runtime objects. by mother board ID and children identities ID
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.TrackableSpaceCalibrationManager.GetFilePath">
             <summary>
             Gets the file path.
             </summary>
             <returns>The file path.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.TrackableSpaceCalibrationManager.SerializeCalibrationFrames">
             <summary>
             Serializes the calibration data per frames to /sdcard
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.TrackableSpaceCalibrationManager.SerializeCalibrationMatrix">
             <summary>
             Serializes the calibration matrice data to /sdcard
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.TrackableSpaceCalibrationManager.ResetCalibration">
             <summary>
             Resets all calibration process.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.TrackedObjectJson">
             <summary>
             Tracked object json.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Pose">
             <summary>
             Structure : position, rotation and time stamp.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.RXInput">
             <summary>
             RhinoX helmet input.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.IsButton(Ximmerse.RhinoX.RXInput.RhinoXButton)">
             <summary>
             Is player pressing the button ?
             </summary>
             <returns><c>true</c>, if confirm key was ised, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.IsButtonDown(Ximmerse.RhinoX.RXInput.RhinoXButton)">
             <summary>
             is player pressing down the button ?
             </summary>
             <returns><c>true</c>, if confirm key down was ised, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.IsButtonUp(Ximmerse.RhinoX.RXInput.RhinoXButton)">
             <summary>
             is player pressing up the button ?
             </summary>
             <returns><c>true</c>, if confirm key down was ised, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.IsButtonTap(Ximmerse.RhinoX.RXInput.RhinoXButton)">
             <summary>
             Is player tapping on the button ?
             </summary>
             <returns><c>true</c>, if button tap was ised, <c>false</c> otherwise.</returns>
             <param name="button">Button.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.IsButtonDoubleTap(Ximmerse.RhinoX.RXInput.RhinoXButton)">
             <summary>
             Is player double tapping on the button ?
             </summary>
             <returns><c>true</c>, if button tap was ised, <c>false</c> otherwise.</returns>
             <param name="button">Button.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.PoseFrame">
             <summary>
             pose frame data.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.unityTime">
             <summary>
             The unity time.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.unityFrame">
             <summary>
             The unity frame.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.unityDeltaTime">
             <summary>
             The untiy delta time.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.isRecenterFrame">
             <summary>
             Is this frame recentering VIO ?
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.headTrackedPredictedPosition">
             <summary>
             The head tracked output predicted position.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.headTrackedPredictedRotation">
             <summary>
             The head tracked output predicted rotation.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.headPredictPosition">
             <summary>
             The head world position at the frame. This is predict value.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.headPredictRotation">
             <summary>
             The head world rotation at the frame
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.trackingAnchorPredictedPosition">
             <summary>
             The tracking anchor world position, base on predict VIO pose
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.trackingAnchorPredictedRotation">
             <summary>
             The tracking anchor world rotation, base on predict VIO pose
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SearchFrameOutput">
             <summary>
             Output of VIO frame when searching vio frame by time.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.SearchFrameOutput.Lerp">
             <summary>
             Lerp value between the two frames where the target time falls in
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.SearchFrameOutput.FramesAfter">
             <summary>
             Output the cache frame after the search time
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.SearchFrameOutput.FrameBefore">
             <summary>
             Output the cache frame before the search time
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.PoseQueue">
             <summary>
             This class cache pose data in a queue, provide access to look VIO frames backward.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PoseQueue.PushFrame(Ximmerse.RhinoX.Internal.PoseFrame)">
             <summary>
             Pushs a new frame into the queue at the last index.
             If all of the queue's frames's total time reaches max cache time, the earlies frame will be droped.
             </summary>
             <param name="newFrame">New frame.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PoseQueue.SearchBackwardTime(System.Single,Ximmerse.RhinoX.Internal.PoseFrame@,Ximmerse.RhinoX.Internal.SearchFrameOutput)">
             <summary>
             Searchs historic pose frame from the current time backward N seconds.
             </summary>
             <returns><c>true</c>, if backward time was searched, <c>false</c> otherwise.</returns>
             <param name="backwardSeconds">Backward seconds.</param>
             <param name="frame">Frame.</param>
             <param name="poseDelta">Pose delta.</param>
             <param name="search">Search.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PoseQueue.SearchBackwardFrame(System.Int32,Ximmerse.RhinoX.Internal.PoseFrame@)">
             <summary>
             Searchs pose frame data in N frames backward and calculate delta
             </summary>
             <returns><c>true</c>, if backward frame was searched, <c>false</c> otherwise.</returns>
             <param name="backwardFrame">Backward frame.</param>
             <param name="frame">Frame.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PoseQueue.GetLatest">
             <summary>
             Gets the latest pose frame.
             </summary>
             <returns>The latest.</returns>
            </member>
        <member name="T:Ximmerse.RhinoX.RXRaycastInfo">
             <summary>
             Internal struct for rx-raycaster info
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.distance">
             <summary>
             The distance of hit info.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.hitOn">
             <summary>
             The gameobject gets hit on.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycastInfo.raycaster">
             <summary>
             The raycaster.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.worldPosition">
             <summary>
             The world position that hits on.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.worldNormal">
             <summary>
             The world normal that hits on surface.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.hitDirection">
             <summary>
             The hit direction of the raycasting.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.isNewHit">
             <summary>
             If hit on any gameobject, is this the first hit info ?
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.lostHit">
             <summary>
             If hit on nothing, this field hints the previous hit on gameobject.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.pointerDown">
             <summary>
             Controller flags: pointer down, up, click.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.pointerStartWorldPosition">
             <summary>
             The pointer start world position.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.pointerEventData">
             <summary>
             Unity's pointer event data structure.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.PEMathf">
             <summary>
             Polyengine mathf methods library.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Approximately(UnityEngine.Vector4,UnityEngine.Vector4)">
             <summary>
             Approximately the specified a and b.
             </summary>
             <param name="a">The alpha component.</param>
             <param name="b">The blue component.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Approximately(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Approximately the specified a and b.
             </summary>
             <param name="a">The alpha component.</param>
             <param name="b">The blue component.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Approximately(UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             Approximately the specified a and b.
             </summary>
             <param name="a">The alpha component.</param>
             <param name="b">The blue component.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.PrettyAngle(System.Single)">
             <summary>
             Makes the angle a pretty value between [-180 ... 180]
             </summary>
             <returns>The angle.</returns>
             <param name="angle">Angle.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.PrettyAngle(UnityEngine.Vector3)">
             <summary>
             Makes the euler a pretty value between [-180 ... 180]
             </summary>
             <returns>The euler.</returns>
             <param name="euler">Euler.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.PrettyAngle(UnityEngine.Quaternion)">
             <summary>
             Makes the euler a pretty value between [-180 ... 180]
             </summary>
             <returns>The euler.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.FlattenXZ(UnityEngine.Quaternion@)">
             <summary>
             把 rotation 的X和Z轴旋转角度设置为0。
             Flatten 之后的方向只有水平旋转角度。
             </summary>
             <param name="rotation">Rotation.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.FlattenXZ(UnityEngine.Quaternion)">
             <summary>
             把 rotation 的X和Z轴旋转角度设置为0。
             Flatten 之后的方向只有水平旋转角度。
             </summary>
             <param name="rotation">Rotation.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.DistanceXZ(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get the XZ d of dir1 and dir2 (on XZ surface)
             </summary>
             <returns>The X.</returns>
             <param name="dir1">Dir1.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.DotXZ(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get the XZ DOT of dir1 and dir2 (on XZ surface)
             </summary>
             <returns>The X.</returns>
             <param name="dir1">Dir1.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.SignedAngleXZ(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get the XZ signed angle of dir1 and dir2 (on XZ surface)
             </summary>
             <returns>The X.</returns>
             <param name="dir1">Dir1.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.FloorStep(System.Single,System.Single)">
             <summary>
             Steps the input, return a float that is multiple step to stepValue, and not bigger than input.
             For example, input value = 0.7, step = 0.5, return = 0.5. Input vlaue = 1.2. step = 0.5, return = 1
             </summary>
             <param name="value">Value.</param>
             <param name="step">Step.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.CeilStep(System.Single,System.Single)">
             <summary>
             Steps the input, return a float that is multiple step to stepValue, and not smaller than input.
             For example, input value = 0.7, step = 0.5, return = 1. Input value = 1.2, step = 0.5, return = 1.5
             </summary>
             <returns>The step.</returns>
             <param name="input">Input.</param>
             <param name="step">Step.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.AngleXZ(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get the XZ angle of dir1 and dir2 (on XZ surface)
             </summary>
             <returns>The X.</returns>
             <param name="dir1">Dir1.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.RoundSingle(System.Single,System.Int32)">
             <summary>
             Rounds the float.
             </summary>
             <returns>The float.</returns>
             <param name="f">F.</param>
             <param name="digit">Digit.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.RoundVector2(UnityEngine.Vector2,System.Int32)">
             <summary>
             Rounds the vector2.
             </summary>
             <returns>The float.</returns>
             <param name="f">F.</param>
             <param name="digit">Digit.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.RoundVector3(UnityEngine.Vector3,System.Int32)">
             <summary>
             Rounds the vector3.
             </summary>
             <returns>The float.</returns>
             <param name="f">F.</param>
             <param name="digit">Digit.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.RoundVector4(UnityEngine.Vector4,System.Int32)">
             <summary>
             Rounds the vector4.
             </summary>
             <returns>The float.</returns>
             <param name="f">F.</param>
             <param name="digit">Digit.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.SignedAngle(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Gets the signed angle of baseDir and dir2
             </summary>
             <returns>The angle.</returns>
             <param name="baseDir">Base dir.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.SignedAngle(UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             返回 dir2 到 baseDir 的带符号角度。
             如果在dir2在baseDir右边，返回1.
             否则返回-1.
             如果方向相同，返回0
             </summary>
             <returns>The angle.</returns>
             <param name="baseDir">Base dir.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.AbsDiff(System.Single,System.Single)">
             <summary>
             计算两个float 的绝对值距离
             </summary>
             <returns>The diff.</returns>
             <param name="a">The alpha component.</param>
             <param name="b">The blue component.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Min(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Minimum of two vectors
             </summary>
             <param name="v1">V1.</param>
             <param name="v2">V2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Clamp01(UnityEngine.Vector3)">
             <summary>
             把 vect.x,y,z 的值  Clamp 在 [0..1]
             </summary>
             <param name="vect">Vect.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Max(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Maximum of two vectors
             </summary>
             <param name="v1">V1.</param>
             <param name="v2">V2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.YawByAngle(UnityEngine.Quaternion,System.Single)">
             <summary>
             对 rotation 做Yaw(水平旋转 N个角度)
             </summary>
             <param name="rotation">Rotation.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.PitchByAngle(UnityEngine.Quaternion,System.Single)">
             <summary>
             对 rotation 做 Pitch (以X为轴旋转 N个角度)
             </summary>
             <param name="rotation">Rotation.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.ClampVector2(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             Clamps the vector2.
             </summary>
             <returns>The vector2.</returns>
             <param name="v2">V2.</param>
             <param name="minV2">Minimum v2.</param>
             <param name="maxV2">Max v2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Approach(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             给出原数值 single, 和目标值 target, 速度 speed, 令 single 以speed的速度逼近 target。
             </summary>
             <param name="single">Single.</param>
             <param name="target">Target.</param>
             <param name="speed">Speed.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Int2FractionalFloat(System.Int32)">
             <summary>
             转换整形数字为小数点后的浮点值： 12345 --&gt; 0.12345
             </summary>
             <returns>The fractional float.</returns>
             <param name="Int">Int.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.ThreePlaneIntersection(UnityEngine.Plane,UnityEngine.Plane,UnityEngine.Plane)">
             <summary>
             Calculate three plane's intersection position.
             </summary>
             <returns>The plane intersection.</returns>
             <param name="p1">P1.</param>
             <param name="p2">P2.</param>
             <param name="p3">P3.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.LineIntersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             Calculate two line segment's intersection point.
             Do not calculate the intersection point, faster than another version. 
             </summary>
             <returns><c>true</c>, if intersection was lined, <c>false</c> otherwise.</returns>
             <param name="p1">P1 - Line 1 start point</param>
             <param name="p2">P2 - Line 1 end point</param>
             <param name="p3">P3 - Line 2 start point</param>
             <param name="p4">P4 - Line 2 end point</param>
             <param name="intersection">Intersection.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.LineIntersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2@)">
             <summary>
             Calculate two line segment's intersection point.
             </summary>
             <returns><c>true</c>, if intersection was lined, <c>false</c> otherwise.</returns>
             <param name="p1">P1 - Line 1 start point</param>
             <param name="p2">P2 - Line 1 end point</param>
             <param name="p3">P3 - Line 2 start point</param>
             <param name="p4">P4 - Line 2 end point</param>
             <param name="intersection">Intersection.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.PitchNYaw(UnityEngine.Quaternion)">
             <summary>
             Remove roll from euler angle.
             </summary>
             <returns>The roll.</returns>
             <param name="quaternion">Quaternion.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Pitch(UnityEngine.Quaternion)">
             <summary>
             Remove yaw and roll from euler angle.
             </summary>
             <returns>The roll.</returns>
             <param name="quaternion">Quaternion.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Yaw(UnityEngine.Quaternion)">
             <summary>
             Remove pitch and roll from euler angle.
             </summary>
             <returns>The roll.</returns>
             <param name="quaternion">Quaternion.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Roll(UnityEngine.Quaternion)">
             <summary>
             Remove pitch and yaw from euler angle.
             </summary>
             <returns>The roll.</returns>
             <param name="quaternion">Quaternion.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.QDiff(UnityEngine.Quaternion,UnityEngine.Quaternion)">
             <summary>
             Calculate quaternion diff = lhs - rhs
             </summary>
             <returns>The iff.</returns>
             <param name="lhs">Lhs.</param>
             <param name="rhs">Rhs.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.QSum(UnityEngine.Quaternion,UnityEngine.Quaternion[])">
             <summary>
             Calculate quaternion sum : lhs + rhs[0] + rhs[1] + rhs[2] ...
             </summary>
             <returns>The plus.</returns>
             <param name="lhs">Lhs.</param>
             <param name="rhs">Rhs.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.YawDiff(UnityEngine.Quaternion,UnityEngine.Quaternion)">
             <summary>
             yaw angle diff : lhs.yaw - rhs.yaw
             </summary>
             <returns>The diff.</returns>
             <param name="lhs">lhs.</param>
             <param name="rhs">rhs.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.AnchorNode">
             <summary>
             Defines the important transform node exposed by AIO sdk.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.AnchorNode.HeadNode">
             <summary>
             The head node transform, equals to ARCamera.Instance.transform
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.AnchorNode.LeftEye">
             <summary>
             The left eye transform.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.AnchorNode.RightEye">
             <summary>
             The right eye transform.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.AnchorNode.MonoEye">
             <summary>
             The VPU tracking anchor..
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.AnchorNode.EyeCenter">
             <summary>
             The eye center node ,this is a transform parent to left and right eye, but without a camera.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.CalibrationFrameSegment">
             <summary>
             Collections of calibration frames
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.CalibrationFrameSegment.CalculateMatrix(UnityEngine.Matrix4x4@,UnityEngine.Matrix4x4@)">
             <summary>
             Calculates the matrix.
             Output matrix convert self transform to other, and other transform to self.
             </summary>
             <param name="LocalToOther">Local to other.</param>
             <param name="OtherToLocal">Other to self.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.CalibrationFrameSegment.ConvertToSerializationObject">
             <summary>
             Convert the data to serialization object.
             </summary>
             <returns>The serialize.</returns>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.FoveationLevel">
             <summary>
             Enum : foveation level.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.Foveation">
             <summary>
             Foveation : data structure of foveation data.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.Foveation.Gain">
             <summary>
             Foveation Gain Rate [1, ...]
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.Foveation.Area">
             <summary>
             Foveation Area Size [0, ...]
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.Foveation.Minimum">
             <summary>
             Foveation Minimum Resolution [1, 1/2, 1/4, ..., 1/16, 0]
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.DeviceInfo">
             <summary>
             Device info : data structure to define device information configurd on this AIO device.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.VIO_HeadX">
             <summary>
             The VIO head X offset.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.VIO_HeadY">
             <summary>
             The VIO head Y offset
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.VIO_HeadZ">
             <summary>
             The VIO head Z offset.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.VIO_HeadPitch">
             <summary>
             The VIO head pitch.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.TrackingPX">
             <summary>
             The tracking position offset X.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.TrackingPY">
             <summary>
             The tracking position offset Y.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.TrackingPZ">
             <summary>
             The tracking position offset Z.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.TrackingQX">
             <summary>
             The tracking euler offset X.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.TrackingQY">
             <summary>
             The tracking euler offset Y.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.TrackingQZ">
             <summary>
             The tracking euler offset Z.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.pVector4Int">
             <summary>
             Vector4 int
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.pVector4Int.Clamp(Ximmerse.RhinoX.pVector4Int,Ximmerse.RhinoX.pVector4Int)">
             <summary>
             Clamps the Vector4Int to the bounds given by min and max.
             </summary>
             <param name="min">Minimum.</param>
             <param name="max">Max.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.pVector4Int.Max(Ximmerse.RhinoX.pVector4Int,Ximmerse.RhinoX.pVector4Int)">
             <summary>
             Returns a vector that is made from the largest components of two vectors.
             </summary>
             <param name="lhs">Lhs.</param>
             <param name="rhs">Rhs.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.pVector4Int.Min(Ximmerse.RhinoX.pVector4Int,Ximmerse.RhinoX.pVector4Int)">
             <summary>
             Returns a vector that is made from the smallest components of two vectors.
             </summary>
             <param name="lhs">Lhs.</param>
             <param name="rhs">Rhs.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.pVector4Int.Distance(Ximmerse.RhinoX.pVector4Int,Ximmerse.RhinoX.pVector4Int)">
             <summary>
             return distance between a and b
             </summary>
             <param name="a">The alpha component.</param>
             <param name="b">The blue component.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.pVector4Int.FloorToInt(UnityEngine.Vector4)">
             <summary>
             Converts a Vector4 to a Vector4Int by doing a Floor to each value.
             </summary>
             <returns>The to int.</returns>
             <param name="v4">V4.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.pVector4Int.RoundToInt(UnityEngine.Vector4)">
             <summary>
             Converts a Vector3 to a Vector3Int by doing a Round to each value.
             </summary>
             <returns>The to int.</returns>
             <param name="v4">V4.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.pVector4Int.CeilToInt(UnityEngine.Vector4)">
             <summary>
             Converts a Vector3 to a Vector3Int by doing a Ceiling to each value.
             </summary>
             <returns>The to int.</returns>
             <param name="v4">V4.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.pVector4Int.Scale(Ximmerse.RhinoX.pVector4Int,Ximmerse.RhinoX.pVector4Int)">
             <summary>
             Multiplies two vectors component-wise.
             Every component in the result is a component of a multiplied by the same component of b.
             </summary>
             <returns>The to int.</returns>
             <param name="v4">V4.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.ViewFrustum">
             <summary>
             View frustum : data structure to define a view frustum
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.Side">
             <summary>
             Side enum.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.CalibrationIdentity">
             <summary>
             Runtime calibration identity.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CalibrationIdentity.TrackableID">
             <summary>
             The trackable identifier.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CalibrationIdentity.IsTransparentNode">
             <summary>
             If the node is a transparent node ?
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.CalibrationSerializationData">
             <summary>
             Calibration serialization data.
             用于持久化的数据格式。
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CalibrationSerializationData.SelfID">
             <summary>
             The marker ID represents "self"
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CalibrationSerializationData.OtherID">
             <summary>
             The marker ID represents "other"
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CalibrationSerializationData.P_Self2Other">
             <summary>
             Position transfer self to other space
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CalibrationSerializationData.Q_Self2Other">
             <summary>
             Rotation transfer self to other space
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CalibrationSerializationData.P_Other2Self">
             <summary>
             Position transfer other to self space
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CalibrationSerializationData.Q_Other2Self">
             <summary>
             Rotation transfer other to self space
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.CalibrationSerializationData.DeserializeFrameData(System.Byte[],System.Int32@)">
             <summary>
             Deserialize the specified frame buffers in pointer.
             </summary>
             <returns>The deserialize.</returns>
             <param name="buffers">Buffers.</param>
             <param name="pointer">Pointer.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.CalibrationSerializationData.DeserializeFramesToList(System.Byte[])">
             <summary>
             Deserializes the frames to list.
             </summary>
             <returns>The frames to list.</returns>
             <param name="buffer">Buffer.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.InternalControllerIndex">
             <summary>
             Controller Index.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.RXEventSystem">
             <summary>
             RhinoX event system, should be singleton instance, driver class of RhinoX input event system.
             Note: RXEventSystem need to be the only event system, if your scene has Unity's built in EventSystem instane, RXEventSystem will remove it when starts.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.XimmerseControllerSystem">
             <summary>
             Script to access Ximmerse controller interfaces.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.XimmerseControllerSystem.IsInitialized">
             <summary>
             Is the ximmerse controller system initialized ?
             </summary>
             <value><c>true</c> if is initialized; otherwise, <c>false</c>.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.XimmerseControllerSystem.TapTimeThreshold">
             <summary>
             The time threshold for button tap.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.XimmerseControllerSystem.OnControllerConnected">
             <summary>
             Event : on controller of index is connected.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.XimmerseControllerSystem.OnControllerDisconnected">
             <summary>
             Event : on controller of index is disconnected.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.StaticUpdate">
             <summary>
             Update the input system.
             Should be call one per frame.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.StartPairingByRFID">
             <summary>
             Starts pairing by RFID. 
             Used for new framework.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.StartParingByCtrlType(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes)">
             <summary>
             Starts pairing by controller type, used for old framework.
             </summary>
             <param name="controllerType">Controller type.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetPairedDeviceCount">
             <summary>
             Gets paired device count.
             </summary>
             <param name="PairedNumber">Paired number.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.ConnectAll">
             <summary>
             Connects all paired device.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.ConnectByMAC(System.String)">
             <summary>
             Connect by MAC address directly.
             You should pass literal MAC address , e.g 01:06:00:00:15:28 , internally this method converts literal mac address to hardware format.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.Disconnect(System.Int32)">
             <summary>
             Disconnect the controller at the index.
             </summary>
             <param name="Index">Index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.StopPairing">
             <summary>
             Stops pairing.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.UnpairAll">
             <summary>
             Unpairs all.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.Unpair(System.Int32)">
             <summary>
             Unpair the specified controllerIndex.
             </summary>
             <param name="controllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.IsControllerConnected(System.Int32)">
             <summary>
             Check if controller 01 is connected.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.Vibrate(System.Int32,System.Single,System.Int32)">
             <summary>
             Vibrate the controller of index with specified strength, duration.
             If index = -1, will vibrate any connected controller.
             You should pass -1 | 0 | 1 only, if Index == 0 or Index == -1, vibrate the controller at the index.
             </summary>
             <param name="strength">Strength.</param>
             <param name="duration">Duration.</param>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetInputRotation(System.Int32)">
             <summary>
             Gets the input controller rotation.
             Passing controller index = -1 to return the first connected controller's rotation.
             If you want to target specific controller index, passing 0 for controller 01, passing 1 for controller 02.
             </summary>
             <returns>The input rotation.</returns>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetRawRotation(System.Int32)">
             <summary>
             Returns a 4 length array represents raw rotation elements.
             </summary>
             <returns>The raw rotation.</returns>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetInputGyroscope(System.Int32)">
             <summary>
             Gets the input controller gyroscope.
             Passing controller index = -1 to return the first connected controller's gyroscope.
             If you want to target specific controller index, passing 0 for controller 01, passing 1 for controller 02.
             </summary>
             <returns>The input rotation.</returns>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetInputAcceleration(System.Int32)">
             <summary>
             Gets the input controller acceleration.
             Passing controller index = -1 to return the first connected controller's acceleration.
             If you want to target specific controller index, passing 0 for controller 01, passing 1 for controller 02.
             </summary>
             <returns>The input rotation.</returns>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.RecenterControllerIMURotation(System.Single,System.Int32)">
             <summary>
             Recenter the controller IMU rotation
             </summary>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.IsKeyDown(Ximmerse.RhinoX.ControllerButtonCode,System.Int32)">
             <summary>
             Check if the button is currently pressing down at the frame ? 
             Passing controller index = -1 means both controller 01 or 02 can trigger a key down result.
             If you want to target specific controller index, passing 0 for controller 01, passing 1 for controller 02.
             </summary>
             <returns><c>true</c> if is key the specified button ControllerIndex; otherwise, <c>false</c>.</returns>
             <param name="button">Button.</param>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.IsKey(Ximmerse.RhinoX.ControllerButtonCode,System.Int32)">
             <summary>
             Check if the button is currently pressing down. 
             Passing controller index = -1 means both controller 01 or 02 can trigger a key down result.
             If you want to target specific controller index, passing 0 for controller 01, passing 1 for controller 02.
             </summary>
             <returns><c>true</c> if is key the specified button ControllerIndex; otherwise, <c>false</c>.</returns>
             <param name="button">Button.</param>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.IsKeyUp(Ximmerse.RhinoX.ControllerButtonCode,System.Int32)">
             <summary>
             Check if the button is currently loosing up. 
             Passing controller index = -1 means both controller 01 or 02 can trigger a key down result.
             If you want to target specific controller index, passing 0 for controller 01, passing 1 for controller 02.
             </summary>
             <returns><c>true</c> if is key the specified button ControllerIndex; otherwise, <c>false</c>.</returns>
             <param name="button">Button.</param>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.IsTap(Ximmerse.RhinoX.ControllerButtonCode,System.Int32)">
             <summary>
             Check if the button has been triggering a tap event.
             Passing controller index = -1 means both controller 01 or 02 can trigger a key down result.
             If you want to target specific controller index, passing 0 for controller 01, passing 1 for controller 02.
             </summary>
             <returns><c>true</c> if is key the specified button ControllerIndex; otherwise, <c>false</c>.</returns>
             <param name="button">Button.</param>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetControllerRotation(System.Int32)">
             <summary>
             Gets the controller01 rotation.
             </summary>
             <returns>The controller01 rotation.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetTouchPad(UnityEngine.Vector2@,System.Int32)">
             <summary>
             Gets the touch-pad.
             Center point = 0. 
             left top = -0.5,
             </summary>
             <returns><c>true</c>, if touch pad was gotten, <c>false</c> otherwise.</returns>
             <param name="TouchPad">Touch pad pointer.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.CursorRaycaster">
             <summary>
             Internal class for cursor raycaster.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.CursorRaycaster.IsPointerDown">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.CursorRaycaster" /> is pointer down.
             </summary>
             <value><c>true</c> if is pointer down; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.CursorRaycaster.IsPointerPressed">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.CursorRaycaster" /> is pointer pressed.
             </summary>
             <value><c>true</c> if is pointer pressed; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.CursorRaycaster.IsPointerUp">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.CursorRaycaster" /> is pointer up.
             </summary>
             <value><c>true</c> if is pointer up; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.CursorRaycaster.IsPointerTap">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.CursorRaycaster" /> is pointer tap.
             </summary>
             <value><c>true</c> if is pointer tap; otherwise, <c>false</c>.</value>
            </member>
        <member name="T:Ximmerse.RhinoX.TagTrackingEngine">
             <summary>
             VPU tag tracking engine : drives tag tracking function.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.TagTrackingEngine.OnPostHeadUpdate">
             <summary>
             Event : called after head pose is updated.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.profile">
             <summary>
             The marker tracking profile that currently being loaded to VPU.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.SeperateAnchor">
             <summary>
             Use seperate eye anchor.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.m_Anchor_Center">
             <summary>
             The VPU tracking anchor : middle , left eye and right eye.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.m_LeftEye">
             <summary>
             The left and right eye transform
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.MarkerPosePreTilt">
             <summary>
             Marker pose pre tilt.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.MarkerPositionIndex">
             <summary>
             The index of the marker position.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.MarkerPositionSign">
             <summary>
             The marker position sign.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.MarkerRotationIndex">
             <summary>
             The index of the marker rotation.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.MarkerRotationSign">
             <summary>
             The marker rotation sign.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.TagTrackingEngine.IsSupported">
             <summary>
             Is VPU tracking supported ?
             </summary>
             <value><c>true</c> if is supported; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.TagTrackingEngine.UpdateBeforeHeadPose">
             <summary>
             Update before head pose is fetched from SVR and applied to unity transform.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.TagTrackingEngine.UpdateAfterHeadPose">
             <summary>
             Updates the tracking engine objects after VIO head pose has been set.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.TagTrackingEngine.SetTrackingProfile(Ximmerse.RhinoX.ObjectTrackingProfile)">
             <summary>
             Sets and loads the tracking profile.
             The previous loaded profile will be unloaded.
             </summary>
             <param name="TrackingProfile">Tracking Profile.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.RxDraw">
             <summary>
             GL draw helper.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxDraw.RxDrawRequest.uiVerts">
             <summary>
             UI Verts : data structure wrap for UI/Text drawing
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxDraw.PEDrawType.HumanSkeleton">
             <summary>
             Draw a human skeleton, where original model height = 1m.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxDraw.PEDrawType.HumanSkeletonLine">
             <summary>
             Draw a human skeleton line, where original model height = 1m
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxDraw.PEDrawType.DogSkeleton">
             <summary>
             Draw a human skeleton, where original model width = 1m
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxDraw.PEDrawType.DogSkeletonLine">
             <summary>
             Draw a human skeleton line, where original model width = 1m
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxDraw.PEDrawType.GUICircle">
             <summary>
             Draws a GUI circle.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxDraw.PEDrawType.ScreenRect">
             <summary>
             Draws full screen rect.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxDraw.PEDrawType.TextMesh3D">
             <summary>
             Draws 3d text mesh
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.SetCustomMaterial(UnityEngine.Material,System.Int32)">
             <summary>
             Sets the custom material for previous draw command.
             </summary>
             <param name="CustomMaterial">Custom material.</param>
             <param name="Pass">Pass.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws a line.
             </summary>
             <param name="start">Start.</param>
             <param name="end">End.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Single)">
             <summary>
             Draws a line.
             </summary>
             <param name="start">Start.</param>
             <param name="end">End.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws a ray.
             </summary>
             <param name="start">Start.</param>
             <param name="direction">Direction.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Single)">
             <summary>
             Draws a ray.
             </summary>
             <param name="start">Start.</param>
             <param name="direction">Direction.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawSphere(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a sphere.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWireSphere(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a wire sphere.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWiredSphere(UnityEngine.Vector3,System.Single,UnityEngine.Color,UnityEngine.Color,System.Single)">
             <summary>
             Draws a sphere with wired.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawArrow(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws an arrow.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws mesh directly
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawMeshWireframe(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws mesh wire frame
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawCube(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a cube.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawCone(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a cone.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWireCone(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a wire cone.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawCylinder(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a cylinder.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawPyramid(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a pyramid.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWireCube(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a wire cube.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWiredCube(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.Color,UnityEngine.Color,System.Single)">
             <summary>
             Draws a wired cube.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawCuboid(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws a cuboid.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWireCuboid(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws a wire Cuboid.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWiredCuboid(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single)">
             <summary>
             Draws a wired Cuboid.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawQuad(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a quad.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWireQuad(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a quad of wire.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWiredQuad(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color,System.Single)">
             <summary>
             Draws a wired and filled quad.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawPlane(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a plane.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWirePlane(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a plane of wire.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWiredPlane(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color,System.Single)">
             <summary>
             Draws a wired and filled plane.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawTranslateGizmos(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single)">
             <summary>
             Draws the translate(positional) gizmos.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.Text3D(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.String,UnityEngine.Color,System.Single,UnityEngine.Font,UnityEngine.FontStyle)">
             <summary>
             Draws a 3D text mesh.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
             <param name="text">Text.</param>
             <param name="Duration">Duration.</param>
             <param name="color">Color.</param>
             <param name="font">Font.If null, the default arial is used.</param>
             <param name="Style">Style.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.UIVerticesToTextMesh(System.Collections.Generic.List{UnityEngine.UIVertex},UnityEngine.Mesh)">
             <summary>
             Convert UI vertices to mesh
             </summary>
             <param name="verticesLst">Vertices lst.</param>
             <param name="TextMesh">Text mesh.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawRotationGizmos(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single)">
             <summary>
             Draws the rotation gizmos.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawGrids(UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32,System.Int32,System.Single,System.Single,UnityEngine.Color,System.Single,Ximmerse.RhinoX.Internal.RxDraw.RxDrawAlignment)">
             <summary>
             Draws the grid gizmos.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawHumanSkeleton(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws a human skeleton.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawHumanSkeletonLine(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws a human skeleton line.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawGUICircle(UnityEngine.Vector3,System.Single,UnityEngine.Color,UnityEngine.Camera,System.Single)">
             <summary>
             Draws a GUI circle at the screen point.
             If drawSpace = ViewPort, Position and Radius is measured in screen coordination.
             Else If drawSpace = ScreenSpace, Screen point and Radius is measured in pixel coordination.
             Else If drawSpace = WorldSpace, Screen point and Radius is measured in 3D global coordination.
             </summary>
             <param name="ScreenPoint">Screen point.</param>
             <param name="Radius">Radius.</param>
             <param name="color">Color.</param>
             <param name="cameraTarget">Camera target.</param>
             <param name="duration">Duration.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawDogSkeleton(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws a dog skeleton.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawDogSkeletonLine(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws a dog skeleton line.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawScaleGizmos(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single)">
             <summary>
             Draws a scale gizmos.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawScreenRect(UnityEngine.Color,System.Single,System.Single)">
             <summary>
             Draws a screen rect, when scale = 1, the rect fully covers screen viewport.
             </summary>
             <param name="color">Color.</param>
             <param name="scale">Scale.</param>
             <param name="duration">Duration.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.InitializeBehavior">
             <summary>
             Initializes the behavior.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.ConvertPixelSpace(Ximmerse.RhinoX.Internal.RxDraw.RxDrawRequest@)">
             <summary>
             Converts the position from screen normalize space to pixel space.
             </summary>
             <param name="drawRequest">Draw request.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.ControllerIndex">
             <summary>
             Controller index.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerIndex.Any">
             <summary>
             The first controller that is currently connect and active.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerIndex.Controller01">
             <summary>
             The controller 01.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerIndex.Controller02">
             <summary>
             The controller 02.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.CalibrationEntityData">
             <summary>
             Represents one single entity data of calibration .
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CalibrationEntityData.dataMap">
             <summary>
             The data map : key = other marker ID, value = calibration segments.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.CalibrationEntityData.HasBeenCalibratedTo(System.Int32)">
             <summary>
             Has this entry already been calibrated to otherID ?
             </summary>
             <returns><c>true</c>, if been calibrated to was hased, <c>false</c> otherwise.</returns>
             <param name="OtherID">Other identifier.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.CalibrationEntityData.GetCalibrationProgress(System.Int32)">
             <summary>
             Gets a normalized calibration progress.
             </summary>
             <returns>The calibration progress.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.CalibrationEntityData.SerialzeTo">
             <summary>
             Serialzes to.
             </summary>
             <returns>The to.</returns>
            </member>
        <member name="T:Ximmerse.RhinoX.PEReflectionUtility">
             <summary>
             Polyengine reflection utility 
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.GetEnumerations``1">
             <summary>
             Return enumerations in array
             </summary>
             <returns>The enumerations.</returns>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.GetEnumerationsExcept``1(``0[])">
             <summary>
             Return enumerations in array
             </summary>
             <returns>The enumerations.</returns>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.GetFieldValue``1(System.Object,System.String,System.Reflection.BindingFlags,System.Boolean)">
             <summary>
             Gets the field value.
             </summary>
             <returns>The field value.</returns>
             <param name="_object">Object.</param>
             <param name="FieldName">Field name.</param>
             <param name="bFlag">B flag.</param>
             <param name="SearchUpwards">If set to <c>true</c> search upwards.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.SetFieldValue``1(System.Object,System.String,``0,System.Reflection.BindingFlags,System.Boolean)">
             <summary>
             Sets the field value to the _object .
             Return true for setting successfully.
             </summary>
             <param name="_object">Object.</param>
             <param name="FieldName">Field name.</param>
             <param name="FieldValue">Field value.</param>
             <param name="bindingAttribute">Binding attribute.</param>
             <param name="SearchUpwards">If set to <c>true</c> search upwards.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.GetPropertyValue``1(System.Object,System.String,System.Reflection.BindingFlags,System.Boolean)">
             <summary>
             Gets the property value.
             </summary>
             <returns>The field value.</returns>
             <param name="_object">Object.</param>
             <param name="FieldName">Field name.</param>
             <param name="bFlag">B flag.</param>
             <param name="SearchUpwards">If set to <c>true</c> search upwards.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.SetPropertyValue``1(System.Object,System.String,``0,System.Reflection.BindingFlags,System.Boolean)">
             <summary>
             Gets the property value.
             </summary>
             <returns>The field value.</returns>
             <param name="_object">Object.</param>
             <param name="FieldName">Field name.</param>
             <param name="bFlag">B flag.</param>
             <param name="SearchUpwards">If set to <c>true</c> search upwards.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.SearchMethodUpwards(System.Type,System.String,System.Reflection.BindingFlags)">
             <summary>
             Searchs the method in the given type and its base type.
             </summary>
             <returns>The method upwards.</returns>
             <param name="MethodName">Method name.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.SearchProperty(System.Type,System.String,System.Reflection.BindingFlags)">
             <summary>
             Searchs the property in the given type. If the property is not found ,will try searching upwards along base type.
             </summary>
             <returns>The property.</returns>
             <param name="type">Type.</param>
             <param name="propertyName">Property name.</param>
             <param name="bindingFlags">Binding flags.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.SearchField(System.Type,System.String,System.Reflection.BindingFlags)">
             <summary>
             Searchs the field in the given type. If the field is not found ,will try searching upwards along base type.
             </summary>
             <returns>The property.</returns>
             <param name="type">Type.</param>
             <param name="propertyName">Property name.</param>
             <param name="bindingFlags">Binding flags.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.SearchTypeByName(System.String)">
             <summary>
             Finds the type in given fullname, case sensitive..
             </summary>
             <returns>The type.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.FindAllAssignableTypes(System.Type,System.Collections.Generic.List{System.Type})">
             <summary>
             Finds all children types to the target type.
             Return true if found.
             If OnlyProjectScripts = true, search only the scripts presents in this project. 
             Else search for all DLL loaded.
             </summary>
             <param name="">.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.GetFieldsWithAttribute``1(System.Type,System.Reflection.BindingFlags)">
             <summary>
             Return the fields in array which has target attribute attach to.
             </summary>
             <returns>The fields with attribute.</returns>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.GetPropertiesWithAttribute``1(System.Type,System.Reflection.BindingFlags)">
             <summary>
             Return the properties in array which has target attribute attach to.
             </summary>
             <returns>The fields with attribute.</returns>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrLayerFlags">
             <summary>
             Svr layer flags.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.UltiDrawExt.serializeTransform">
             <summary>
             Serialize transform represent a full hierarchy transform node.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.UltiDrawExt.humanBonesTransformData">
             <summary>
             The human bones transform data.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.UltiDrawExt.dogBoneTransformData">
             <summary>
             The dog bones transform data.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.UltiDrawExt.humanBonesArrayTransform">
             <summary>
             a constant string represent human bone array transform, in the format of serializeTransform format.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.UltiDrawExt.DrawHumanSkeletonLine(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color)">
             <summary>
             Draws a human skeleton.
             </summary>
             <param name="point">Point.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.UltiDrawExt.DrawMeshWireFrame(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Mesh,UnityEngine.Color)">
             <summary>
             Draws the mesh wire frame.
             </summary>
             <param name="point">Point.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
             <param name="mesh">Mesh.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.UltiDrawExt.DrawHumanSkeleton(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color)">
             <summary>
             Draws a human skeleton.
             </summary>
             <param name="point">Point.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.UltiDrawExt.DrawDogSkeletonLine(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color)">
             <summary>
             Draws a dog skeleton line.
             </summary>
             <param name="point">Point.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.UltiDrawExt.DrawDogSkeleton(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color)">
             <summary>
             Draws a dog skeleton.
             </summary>
             <param name="point">Point.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
             <param name="color">Color.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.GroundPlane">
             <summary>
             Ground plane represents static trackable object placed on environment, to reposition head pose according to the relative pose between head and trackable object.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.GroundPlane.RecenterMode">
             <summary>
             Recenter behaviour mode.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.RecenterMode.Everyframe">
             <summary>
             Tries to recenter head everyframe, as long as the ground plane object is tracked.
             This is the default mode;
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.RecenterMode.FixedInterval">
             <summary>
             Try to recenter in a fixed time interval.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.RecenterMode.FirstTracked">
             <summary>
             Recenter head at the first frame when the ground plane object is tracked, then never recenter again until the ground plane is lost tracked and become visible again.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.recenterMode">
             <summary>
             Gets or sets the recenter mode.
             </summary>
             <value>The recenter mode.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.m_RecenterInterval">
             <summary>
              The recenter interval.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.m_MinTrackedDistance">
             <summary>
             The minimum tracking distance.
             可以发生对齐的最小追踪距离
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.m_MaxTrackedDistance">
             <summary>
             The max tracking distance.
             可以发生对齐的最大追踪距离
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.m_MinErrorHeadDistance">
             <summary>
             The minimum error head distance allow when performing recenter.
             If distance between head and target position less than this value, will not recenter head.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.m_MinErrorHeadDiffAngle">
             <summary>
             The minimum error head diff angle
             对齐时候允许头部对齐动作的最小误差角度.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.PreviousRecenterTime">
             <summary>
             Static value : previous recenter time.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.RecenterInterval">
             <summary>
             Gets or sets the recenter interval.
             </summary>
             <value>The recenter scanning interval.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.VPUFrameDelay">
             <summary>
             Gets or sets the delay time from rendering to VPU.
             </summary>
             <value>The backward time.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.MinTrackedDistance">
             <summary>
             Gets or sets the minimum tracking distance to allow recenter.
             可以发生对齐的最小追踪距离.
             </summary>
             <value>The minimum recenter distance.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.MaxTrackedDistance">
             <summary>
             Gets or sets the max tracking distance to allow recenter.
             可以发生对齐的最大追踪距离.
             </summary>
             <value>The max recenter distance.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.MinErrorHeadDistance">
             <summary>
             The minimum error head distance.
             对齐时候允许头部对齐动作的最小距离.
             </summary>
             <value>The minimum error head span.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.DebugView">
             <summary>
             Activates or deactivate debug view.
             </summary>
             <value><c>true</c> if debug view; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.MinErrorHeadDiffAngle">
             <summary>
             Gets or sets the minimum allow head diff angle to recenter.
             </summary>
             <value>The minimum error head diff angle.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.DrawColor">
             <summary>
             Gets or sets the color of the debug drawing.
             </summary>
             <value>The color of the draw.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.CurrentGroundPlane">
             <summary>
             Current ground plane is the latest ground plane object that being used to recenter head.
             </summary>
             <value>The current ground plane.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.GroundPlane.StaticUpdate">
             <summary>
             Static : update ground planes
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.GroundPlane.IsAvailableToRecenter">
             <summary>
             Is this ground plane available to recenter head pose?
             </summary>
             <returns><c>true</c>, if available was ised, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.GroundPlane.TryRecenter">
             <summary>
             Tries to recenter head pose.
             Return true for recenter is performed successfully.
             </summary>
             <returns><c>true</c>, if recenter head was framed, <c>false</c> otherwise.</returns>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.CameraExtension">
             <summary>
             Camera extension.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.SetCameraFov(UnityEngine.Camera,System.Single,System.Single)">
             <summary>
             Set camera's horizontal fov and vertical fov , this will break the built in fov which depends on screen's aspect.
             To restore the original fov based on Unity setting, call ResetProjectionMatrix().
             </summary>
             <param name="camera">Camera.</param>
             <param name="hFov">H fov.</param>
             <param name="vFov">V fov.</param>
             <param name="viewportScale">Viewport scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraProjectionMatrix(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Constructs a projection matrix where near, far, hFov and vFov is defined.
             </summary>
             <param name="near">Near.</param>
             <param name="far">Far.</param>
             <param name="hFov">H fov.</param>
             <param name="vFov">V fov.</param>
             <param name="projectionMatrix">Projection matrix.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraProjectionMatrixByCorners(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
             <summary>
             Gets the camera projection matrix by corners.
             </summary>
             <returns>The camera projection matrix by corners.</returns>
             <param name="bottomLeft">Bottom left.</param>
             <param name="bottomRight">Bottom right.</param>
             <param name="topLeft">Top left.</param>
             <param name="topRight">Top right.</param>
             <param name="cameraPosition">Camera position.</param>
             <param name="near">Near.</param>
             <param name="far">Far.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraProjectionMatrix2(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Constructs a projection matrix where near, far, nearW and nearH is defined.
             </summary>
             <param name="near">Near.</param>
             <param name="far">Far.</param>
             <param name="hFov">H fov.</param>
             <param name="vFov">V fov.</param>
             <param name="projectionMatrix">Projection matrix.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.SetCameraFovWithScale(UnityEngine.Camera,System.Single,System.Single,System.Single)">
             <summary>
             Sets the camera's vFov and hFov with a scale factor.
             </summary>
             <param name="camera">Camera.</param>
             <param name="viewportScale">Viewport scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraFrustumRay(UnityEngine.Camera,UnityEngine.Ray@,UnityEngine.Ray@,UnityEngine.Ray@,UnityEngine.Ray@)">
             <summary>
             Output 4 rays, 4 rays denotes to:
             [0] = frustum's bottom-left corner at near plane to far plane.
             [1] = frustum's bottom-right corner at near plane to far plane.
             [2] = frustum's top-left corner at near plane to far plane.
             [3] = frustum's top-right corner at near plane to far plane.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraFrustumRay(UnityEngine.Camera,UnityEngine.Ray@,UnityEngine.Ray@,UnityEngine.Ray@,UnityEngine.Ray@,System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
             Output 4 rays and distance from near corner to far corner. 4 rays denotes to:
             [0] = frustum's bottom-left corner at near plane to far plane.
             [1] = frustum's bottom-right corner at near plane to far plane.
             [2] = frustum's top-left corner at near plane to far plane.
             [3] = frustum's top-right corner at near plane to far plane.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraFrustumCorners(UnityEngine.Camera,UnityEngine.Vector3[],UnityEngine.Vector3[])">
             <summary>
             Output 2 4-dimemsional arrays which represents the near and far plane of view frustum. 
             
             The vertice order is [0]=bottom left, [1]=bottom right, [2] = top left, [3] = top right
             </summary>
             <param name="camera">Camera.</param>
             <param name="nearPlaneCorners">Near plane corners.</param>
             <param name="farPlaneCorners">Far plane corners.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraViewPortCornersAtDistance(UnityEngine.Camera,System.Single,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,System.Single,UnityEngine.Space)">
             <summary>
             Gets the camera view port corners at distance.
             Scale controls the scale relative to corners center. 
             Passing scale larger than 1 you will get corners composite a rect that largers than the original view port rect, vice versa.
             By passing space = Space.Self, output the local camera space position instead of world space position.
             </summary>
             <param name="camera">Camera.</param>
             <param name="distance">Distance.</param>
             <param name="leftBottom">Left bottom.</param>
             <param name="leftTop">Left top.</param>
             <param name="rightTop">Right top.</param>
             <param name="rightBottom">Right bottom.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraProjectionMatrixViewPortInfo(UnityEngine.Camera,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
             Gets the camera projection matrix view port info.
             </summary>
             <param name="nearViewPortW">Near view port w.</param>
             <param name="nearViewPortH">Near view port h.</param>
             <param name="hFov">H fov.</param>
             <param name="vFov">V fov.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraProjectionMatrixViewPortInfo(UnityEngine.Camera,System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
             Gets the camera projection matrix view port info.
             </summary>
             <param name="nearViewPortW">Near view port w.</param>
             <param name="nearViewPortH">Near view port h.</param>
             <param name="hFov">H fov.</param>
             <param name="vFov">V fov.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraProjectionMatrixViewPortInfo(UnityEngine.Matrix4x4,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
             Gets the camera projection matrix view port info directly from projection matrix.
             </summary>
             <param name="projectionMatrix">Projection matrix.</param>
             <param name="nearViewPortW">Near view port w.</param>
             <param name="nearViewPortH">Near view port h.</param>
             <param name="farViewPortW">Far view port w.</param>
             <param name="farViewPortH">Far view port h.</param>
             <param name="near">Near.</param>
             <param name="far">Far.</param>
             <param name="hFov">H fov.</param>
             <param name="vFov">V fov.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetOrthographicCameraBounds(UnityEngine.Matrix4x4,System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
             Output the orthographic camera's 2D projection rect bounds info.
             </summary>
             <param name="matrix">Matrix.</param>
             <param name="w">The width.</param>
             <param name="h">The height.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.AlignToPhysicsScreen(UnityEngine.Camera,System.Single)">
             <summary>
             Sets the camera FOV , the near view port will ends up matching the current displaying screen's physical size.
             If viewPortScale not equal to 1, the near view port's final scale will be displaying screen's physical scalee multiple the viewPortScale parameter.
             </summary>
             <param name="viewPortScale">View port scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.TestPositionAABB(UnityEngine.Camera,UnityEngine.Vector3,System.Boolean)">
             <summary>
             Tests if the world position insides the camera's view frustum.
             If zTest = true, the z axis is considered (must within near-far plane), else only X-Y coordinate is considered.
             </summary>
             <returns><c>true</c>, if position AAB was tested, <c>false</c> otherwise.</returns>
            </member>
        <member name="T:Ximmerse.RhinoX.RXButtonEventTrigger">
             <summary>
             RhinoX helmet button input event trigger
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXButtonEventTrigger.OnClickConfirmButton">
             <summary>
             Event trigger for clicking confirm button
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXButtonEventTrigger.OnDoubleClickConfirmButton">
             <summary>
             The on double clicking confirm button.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrTextureType">
             <summary>
             Enum used to indicate the type of texture passed in as a render layer for submitFrame
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.ImageRenderer">
             <summary>
             Image render is normally used for rendering cursor.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.ImageRenderer.sImagesRenderers">
             <summary>
             All image renderer.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.ImageRenderer.clipLowerLeft_LeftEye">
             <summary>
             Image display region (camera clip space)
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.ImageRenderer.uvLowerLeft_LeftEye">
             <summary>
             Image source region (texture uv space)
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.ImageRenderer.clipLowerLeft_RightEye">
             <summary>
             Image display region (camera clip space)
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.ImageRenderer.uvLowerLeft_RightEye">
             <summary>
             Image source region (texture uv space)
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.ImageRenderer.Image">
             <summary>
             Gets or sets the image.
             </summary>
             <value>The image.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.ImageRenderer.TexturePtr">
             <summary>
             Gets the texture pointer address.
             </summary>
             <value>The texture ptr.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.ImageRenderer.RenderAt">
             <summary>
             Gets the transform to indicate the render at position , rotation and scale of the image .
             </summary>
             <value>The image local to world matrix.</value>
            </member>
        <member name="T:Ximmerse.RhinoX.Cursor">
             <summary>
             Cursor : in charge of cursor behaviour.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.Cursor.Interactable">
             <summary>
             If the cursor if interactable to event system ? If <see langword="true" />, IPointerEnter, IPointerExit is triggered by unity's event system.
             If <see langword="true" />, IPointerClick is triggered with pointer is entered and player press return button of the RhinoX.
             </summary>
             <value><c>true</c> if interactable; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.Cursor.CullingMask">
             <summary>
             Gets or sets the culling mask, this is the interactable object's layermask that this cursor able to interact with.
             </summary>
             <value>The culling mask.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.Cursor.RenderAtDistance">
             <summary>
             Gets or sets the rendering distance from eye center.
             </summary>
             <value>The distance from eye center.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.Cursor.VerticalOffset">
             <summary>
             Gets or sets the vertical offset of rendering position, origins from eye center.
             </summary>
             <value>The vertical offset.</value>
            </member>
        <member name="T:Ximmerse.RhinoX.AntiAliasing">
             <summary>
             Anti aliasing.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.PerfLevel">
             <summary>
             Hardware perforamnce level
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.UltiDraw.Begin">
             <summary>
             Should be called each time before actual drawing.
             Return false for fail drawing.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.UltiDraw.DrawGridLBOrigin(UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32,System.Int32,System.Single,System.Single,UnityEngine.Color)">
             <summary>
             Draws the grid from origin point, where center, rotation is the left bottom point of the grid.
             </summary>
             <param name="center">Center.</param>
             <param name="rotation">Rotation.</param>
             <param name="cellsX">Cells x.</param>
             <param name="cellsY">Cells y.</param>
             <param name="sizeX">Size x.</param>
             <param name="sizeY">Size y.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.UltiDraw.DrawGridRTOrigin(UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32,System.Int32,System.Single,System.Single,UnityEngine.Color)">
             <summary>
             Draws the grid from origin point, where center, rotation is the right top point of the grid.
             </summary>
             <param name="center">Center.</param>
             <param name="rotation">Rotation.</param>
             <param name="cellsX">Cells x.</param>
             <param name="cellsY">Cells y.</param>
             <param name="sizeX">Size x.</param>
             <param name="sizeY">Size y.</param>
             <param name="color">Color.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.RXInputModule">
             <summary>
             RhinoX controller module, public interface to ximmerse controller input event system.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXInputModule.PointerButton">
             <summary>
             Gets or sets the pointer button. This is the button to trigger pointer event, such as PointerClick, Drag.
             </summary>
             <value>The pointer button.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.RXInputModule.m_EnterGameObjects">
             <summary>
             Focus game object map : key = game object.  Value = number for raycaster that targets on the game object.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXInputModule.m_FocusGameObjects">
             <summary>
             Gameobject currently being focus.
             Key = GameObject get focus.
             Raycaster = Raycaster that currently focusing on.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXInputModule.hitInfoCurrentFrame">
             <summary>
             Hit info of the current frame.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.IsGameObjectEnter(UnityEngine.GameObject)">
             <summary>
             判断一个 GameObject 是否可进入
             </summary>
             <returns><c>true</c>, if game object enter was ised, <c>false</c> otherwise.</returns>
             <param name="go">Go.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.IsGameObjectExit(UnityEngine.GameObject)">
             <summary>
             一个 GameObject 是否可被退出
             </summary>
             <returns><c>true</c>, if game object exit was ised, <c>false</c> otherwise.</returns>
             <param name="go">Go.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.AddGameObjectEnter(UnityEngine.GameObject)">
             <summary>
             添加一个 GameObject 到进入列表
             </summary>
             <param name="go">Go.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.OnGameObjectExit(UnityEngine.GameObject)">
             <summary>
             从进入列表，移除一个GameObject
             </summary>
             <param name="go">Go.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.IsGameObjectNotFocusBefore(UnityEngine.GameObject)">
             <summary>
             判断一个 GameObject 是否可被聚焦
             </summary>
             <returns><c>true</c>, if game object focus was ised, <c>false</c> otherwise.</returns>
             <param name="go">Go.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.GetFocusByRaycaster(UnityEngine.GameObject)">
             <summary>
             Gets the raycaster which focus on the gameobject.
             </summary>
             <returns>The focus by raycaster.</returns>
             <param name="go">Go.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.AddGameObjectFocus(UnityEngine.GameObject,Ximmerse.RhinoX.RXRaycaster)">
             <summary>
             Marks the game object focus by raycaster
             添加一个 GameObject 到 Focus 列表。
             </summary>
             <param name="go">Go.</param>
             <param name="raycaster">Raycaster.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.RemoveGameObjectFocus(UnityEngine.GameObject)">
             <summary>
             Removes the game object focus.
             移除一个 GameObject，从 Focus 列表。
             </summary>
             <param name="go">Go.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.RecenterHeadPoseParameter">
             <summary>
             Recenter head pose parameter.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RecenterHeadPoseParameter.TargetPosition">
             <summary>
             Target world position
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RecenterHeadPoseParameter.TargetRotation">
             <summary>
             Target world rotation
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RecenterHeadPoseParameter.BackwardTime">
             <summary>
             The backward time.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RecenterHeadPoseParameter.AcceptableErrorMinimumDistance">
             <summary>
             The acceptable error distance limitation. 
             If distance between [current head position] and [TargetPosition] less then the [AcceptableErrorMinimumDistance], will not recenter.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.ControllerButtonCode">
             <summary>
             RhinoX controller button enumeration.
             </summary>
             <summary>
             Ximmerse controller button code.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SVR_Android">
             <summary>
             Internal class for SVR android runtime interfaces.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.Initialize">
             <summary>
             A local variables to indicate if the SVR android system has been up and running.
             </summary>
             <value><c>true</c> if is svr running; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.IssueEvent(Ximmerse.RhinoX.Internal.RenderEvent)">
             <summary>
             Dispatch GL event to SVR low level API.
             </summary>
             <param name="e">LL Event</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.BeginEye(System.Int32)">
             <summary>
             Notify SVR LLAPI to begin on eye buffer
             </summary>
             <param name="side">Side value, left = 1, right = 2</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SetTrackingMode(System.Boolean)">
             <summary>
             Sets the tracking mode.
             </summary>
             <param name="TrackingPosition">true if need positional tracking.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SetVSyncCount(System.Int32)">
             <summary>
             Sets the V-sync count.
             </summary>
             <param name="vSyncCount">V-sync count, must be 1 or 2</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.EndEye(System.Int32)">
             <summary>
             Notify SVR LLAPI when eye rendering end-of-frame event.
             </summary>
             <param name="side">Side: left = 1, right = 2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.PollEvent(Ximmerse.RhinoX.Internal.SvrEvent@)">
             <summary>
             Polls LLAPI event to high level codes.
             </summary>
             <returns><c>true</c>, if event was polled, <c>false</c> otherwise.</returns>
             <param name="frameEvent">Frame event.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.GetTrackingMode">
             <summary>
             Gets the tracking mode.
             </summary>
             <returns>The tracking mode.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.GetPredictHeadPose(Ximmerse.RhinoX.Pose@,System.Int32)">
             <summary>
             Gets the head pose.
             </summary>
             <returns>The head pose.</returns>
             <param name="headPose">Head pose.</param>
             <param name="frameIndex">Frame index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.GetHeadPose(Ximmerse.RhinoX.Pose@)">
             <summary>
             Gets the head pose.
             </summary>
             <returns>The head pose.</returns>
             <param name="headPose">Head pose.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.GetFoveationValues(Ximmerse.RhinoX.Internal.FoveationLevel)">
             <summary>
             Gets the foveation values.
             </summary>
             <returns>The foveation values.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.ApplyFoveation">
             <summary>
             Applies the foveation parameter
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrInitializeEventData(System.IntPtr)">
             <summary>
             Svr LLAPI : initialize android event data
             </summary>
             <param name="activity">Activity.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.GetRenderEventFunc">
             <summary>
             Svr LLAPI : return native renderer event entrance
             </summary>
             <returns>The render event func.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrIsInitialized">
             <summary>
             Svr : initialize SVR 
             </summary>
             <returns><c>true</c>, if is initialized was svred, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrGetDeviceInfo(System.Int32@,System.Int32@,System.Single@,System.Int32@,System.Int32@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
             Return native device info.
             </summary>
             <param name="displayWidthPixels">Display width pixels.</param>
             <param name="displayHeightPixels">Display height pixels.</param>
             <param name="displayRefreshRateHz">Display refresh rate hz.</param>
             <param name="targetEyeWidthPixels">Target eye width pixels.</param>
             <param name="targetEyeHeightPixels">Target eye height pixels.</param>
             <param name="targetFovXRad">Target fov XR ad.</param>
             <param name="targetFovYRad">Target fov YR ad.</param>
             <param name="leftFrustumLeft">Left frustum left.</param>
             <param name="leftFrustumRight">Left frustum right.</param>
             <param name="leftFrustumBottom">Left frustum bottom.</param>
             <param name="leftFrustumTop">Left frustum top.</param>
             <param name="leftFrustumNear">Left frustum near.</param>
             <param name="leftEyeFrustumFar">Left eye frustum far.</param>
             <param name="rightFrustumLeft">Right frustum left.</param>
             <param name="rightFrustumRight">Right frustum right.</param>
             <param name="rightFrustumBottom">Right frustum bottom.</param>
             <param name="rightFrustumTop">Right frustum top.</param>
             <param name="rightFrustumNear">Right frustum near.</param>
             <param name="rightFrustumFar">Right frustum far.</param>
             <param name="targetfrustumConvergence">Targetfrustum convergence.</param>
             <param name="targetFrustumPitch">Target frustum pitch.</param>
             <param name="lowFoveationGainX">Low foveation gain x.</param>
             <param name="lowFoveationGainY">Low foveation gain y.</param>
             <param name="lowFoveationArea">Low foveation area.</param>
             <param name="lowFoveationMinimum">Low foveation minimum.</param>
             <param name="medFoveationGainX">Med foveation gain x.</param>
             <param name="medFoveationGainY">Med foveation gain y.</param>
             <param name="medFoveationArea">Med foveation area.</param>
             <param name="medFoveationMinimum">Med foveation minimum.</param>
             <param name="highFoveationGainX">High foveation gain x.</param>
             <param name="highFoveationGainY">High foveation gain y.</param>
             <param name="highFoveationArea">High foveation area.</param>
             <param name="highFoveationMinimum">High foveation minimum.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetupLayerCoords(System.Int32,System.Single[],System.Single[],System.Single[],System.Single[])">
             <summary>
             Svr LLAPI: setup layer mesh's coords
             </summary>
             <param name="layerIndex">Layer index.</param>
             <param name="lowerLeft">Lower left.</param>
             <param name="lowerRight">Lower right.</param>
             <param name="upperLeft">Upper left.</param>
             <param name="upperRight">Upper right.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetupLayerData(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Svr LLAPI : setup rendering layer data.
             </summary>
             <param name="layerIndex">Layer index.</param>
             <param name="sideMask">Side mask.</param>
             <param name="textureId">Texture identifier.</param>
             <param name="textureType">Texture type.</param>
             <param name="layerFlags">Layer flags.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetPerformanceLevelsEventData(System.Int32,System.Int32)">
             <summary>
             Svr set hardware performance level : cpu and gpu.
             </summary>
             <param name="newCpuPerfLevel">New cpu perf level.</param>
             <param name="newGpuPerfLevel">New gpu perf level.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetColorSpace(System.Int32)">
             <summary>
             Svr LLAPI : Set color space . 0 = Gamma, 1 = Linear
             </summary>
             <param name="colorSpace">Color space.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrCanBeginVR">
             <summary>
             Query lower system, can begin VR now ?
             </summary>
             <returns><c>true</c>, if can begin vr was svred, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrIsRunning">
             <summary>
             Native API : Is Svr currently running ?
             </summary>
             <returns><c>true</c>, if is running was svred, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrRecenterTrackingPose(System.Boolean)">
             <summary>
             Native API : Recenter SVR tracking pose
             </summary>
             <returns><c>true</c>, if recenter tracking pose was svred, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrResetVR">
             <summary>
             Reset SVR VIO.
             </summary>
             <returns>The reset vr.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetFoveationParameters(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Native API : Svr set eye foveation parameter.
             </summary>
             <param name="textureId">Texture identifier.</param>
             <param name="previousId">Previous identifier.</param>
             <param name="focalPointX">Focal point x.</param>
             <param name="focalPointY">Focal point y.</param>
             <param name="foveationGainX">Foveation gain x.</param>
             <param name="foveationGainY">Foveation gain y.</param>
             <param name="foveationArea">Foveation area.</param>
             <param name="foveationMinimum">Foveation minimum.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetFrameOffset(System.Single[])">
             <summary>
             Native API : set frame offset.
             </summary>
             <param name="delta">Delta.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetEyeEventData(System.Int32,System.Int32)">
             <summary>
             Native API : set eye event data.
             </summary>
             <param name="sideMask">Side mask.</param>
             <param name="layerMask">Layer mask.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrPollEvent(System.Int32@,System.UInt32@,System.Single@,System.Int32,System.UInt32[])">
             <summary>
             Native API : poll event from LLAPI.
             </summary>
             <returns><c>true</c>, if poll event was svred, <c>false</c> otherwise.</returns>
             <param name="eventType">Event type.</param>
             <param name="deviceId">Device identifier.</param>
             <param name="eventTimeStamp">Event time stamp.</param>
             <param name="eventDataCount">Event data count.</param>
             <param name="eventData">Event data.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrGetTrackingMode">
             <summary>
             Native API : get tracking mode from LLAPI
             </summary>
             <returns>The get tracking mode.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrGetPredictedPose(System.UInt64@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Int32,System.Boolean)">
             <summary>
             Native API : get VIO output pose.
             </summary>
             <returns>The get predicted pose.</returns>
             <param name="timeStampNs">Time stamp ns.</param>
             <param name="rx">Rx.</param>
             <param name="ry">Ry.</param>
             <param name="rz">Rz.</param>
             <param name="rw">Rw.</param>
             <param name="px">Px.</param>
             <param name="py">Py.</param>
             <param name="pz">Pz.</param>
             <param name="frameIndex">Frame index.</param>
             <param name="isMultiThreadedRender">If set to <c>true</c> is multi threaded render.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrGetHeadPose(System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
             Svrs the get head pose (non predict).
             </summary>
             <returns>The get head pose.</returns>
             <param name="rx">Rx.</param>
             <param name="ry">Ry.</param>
             <param name="rz">Rz.</param>
             <param name="rw">Rw.</param>
             <param name="px">Px.</param>
             <param name="py">Py.</param>
             <param name="pz">Pz.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSubmitFrameEventData(System.Int32,System.Single,System.Int32)">
             <summary>
             Submit frame event data.
             </summary>
             <param name="frameIndex">Frame index.</param>
             <param name="fieldOfView">Field of view.</param>
             <param name="frameType">Frame type.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetTrackingModeEventData(System.Int32)">
             <summary>
             LLAPI : Sets tracking mode.
             </summary>
             <param name="mode">Mode.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SetMaxPredictionTime(System.Single)">
             <summary>
             LLAPI : set max prediction time in milli-seconds.
             </summary>
             <param name="MaxPredictionTimeMM">Max prediction time mm.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.GetMaxPredictionTime">
             <summary>
             LLAPI : get max prediction time in milli-seconds.
             </summary>
             <param name="MaxPredictionTimeMM">Max prediction time mm.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetVSyncCount(System.Int32)">
             <summary>
             LLAPI : set vsync count.
             </summary>
             <param name="vSyncCount">V sync count.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrGetWarpMeshOffset(System.Single@,System.Single@)">
             <summary>
             LLAPI : get warp mesh offset (X for horizontal offset and Y for vertical offset)
             </summary>
             <param name="offsetX">Offset x.</param>
             <param name="offsetY">Offset y.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrUpdateWarpMesh(System.Single,System.Single,System.Single)">
             <summary>
             LLAPI : sets warp mesh offset 
             </summary>
             <param name="OffsetX_Left">Offset x.</param>
             <param name="OffsetX_Right">Offset x.</param>
             <param name="OffsetY">Offset y.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.GetSvrTimeNano">
             <summary>
             LLAPI : gets low level time system.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SetRenderThreadAttributesByType(System.Boolean)">
             <summary>
             LLAPI : sets main thread priority.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrRecenterOrientation(System.Boolean)">
             <summary>
             LLAPI : recenter orientation.
             </summary>
             <param name="YawOnly">If set to <c>true</c>, only recenter yaw.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.MarkerConfigInfo">
             <summary>
             Marker config info : a single marker object's config info from JSON.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerConfigInfo.MarkerID">
             <summary>
             The marker identifier.
             </summary> 
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerConfigInfo.MarkerConfigSize">
             <summary>
             The size of the marker config.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerConfigInfo.markerType">
             <summary>
             是 Marker 组还是 单个Marker ?
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerConfigInfo.GroupType">
             <summary>
             The type of the group : controller | cube | map
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.ConfigMarkerType">
             <summary>
             Config marker type.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ConfigMarkerType.SingleMarker">
             <summary>
             The marker is config as a single card
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ConfigMarkerType.MarkerGroup_Submarker">
             <summary>
             The marker is config as a sub-card of the group
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ConfigMarkerType.GroupNode">
             <summary>
             This is a top-group.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ObjectTrackingProfile.IsLoaded">
             <summary>
             Has the tracking profile loaded by tracking system ?
             </summary>
             <value><c>true</c> if is loaded; otherwise, <c>false</c>.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.ObjectTrackingProfile.TrackingItems.JSONConfig">
             <summary>
             Editor only 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ObjectTrackingProfile.TrackingItems.jsonName">
             <summary>
             The name of the json file.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ObjectTrackingProfile.TrackingItems.jsonContent">
             <summary>
             The content of the json.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ObjectTrackingProfile.items">
             <summary>
             Config the tracking items.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ObjectTrackingProfile.m_MarkerConfigInfo">
             <summary>
             Marker config info : key = ID, value = marker config info
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ObjectTrackingProfile.trackingItems">
             <summary>
             Gets the tracking items.
             </summary>
             <value>The tracking items.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.ObjectTrackingProfile.GetTrackableConfigInfo(System.Int32,Ximmerse.RhinoX.MarkerConfigInfo@)">
             <summary>
             Gets the trackable config info.
             Return false if not found.
             Return true and output the marker config info
             </summary>
             <returns><c>true</c>, if marker config info was gotten, <c>false</c> otherwise.</returns>
             <param name="">.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ObjectTrackingProfile.InitializeJson">
             <summary>
             Initializes the json items.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ObjectTrackingProfile.Add(System.String,UnityEngine.Object,System.String)">
             <summary>
             Adds a tracking item.
             </summary>
             <param name="jsonName">Json name : the tracking json profile's name</param>
             <param name="jsonObject">Json object : the tracking json object's reference in your project asset. If you're calling this API at runtime, jsonObject could be null. If you're calling this API at unity editor, jsonObject should not be <see langword="null" />.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ObjectTrackingProfile.Remove(System.Int32)">
             <summary>
             Removes the tracking items at the specific item.
             </summary>
             <param name="Index">Index.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.CustomVPUAlignmentData">
             <summary>
             Custom VPU alignment data.
             Generated by argus. svr
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.CustomVPUAlignmentData.overrideFactory">
             <summary>
             If true, the custom alignment data will override the factory data:
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.TrackingMode">
             <summary>
             Tracking mode.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.TrackingMode.kTrackingOrientation">
             <summary>
             tracking orientation.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.TrackingMode.kTrackingPosition">
             <summary>
             tracking position
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.TrackingMode.kTrackingEye">
             <summary>
             tracking eye (not supported in current SDK)
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CalibrationFrame.DeltaP_Other_2_Local">
             <summary>
             Delta Position : Convert other marker pose into self marker space.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CalibrationFrame.DeltaQ_Other_2_Local">
             <summary>
             Delta Quaternion : Convert other marker pose into self marker space.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CalibrationFrame.DeltaP_Local_2_Other">
             <summary>
             Delta Position : Convert self marker pose into other marker space.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CalibrationFrame.DeltaQ_Local_2_Other">
             <summary>
             Delta Q : Convert self marker pose into other marker space.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.CalibrationFrame.DeltaTime">
             <summary>
             The calibration time.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.CalibrationFrame.Deserialize(System.Byte[],System.Int32@)">
             <summary>
             Deserialize the specified buffer at pointer and return the frame data. Pointer is changed after deserialization.
             </summary>
             <returns>The deserialize.</returns>
             <param name="buffer">Buffer.</param>
             <param name="pointer">Pointer.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.DeviceLLAPI">
             <summary>
             Ximmerse Device low level API.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.isInitialized">
             <summary>
             Is low level API initialized.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.IsInitialized">
             <summary>
             Gets a value indicating LLAPI is initialized.
             </summary>
             <value><c>true</c> if is initialized; otherwise, <c>false</c>.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.ctrl01">
             <summary>
             low level controller 01 , 02.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.HmdHandle">
             <summary>
             HMD device handler, tag : "XHawk-0"
             </summary>
             <value>The hmd hander.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.Controller01Handle">
             <summary>
             Gets the first controller device handle.
             </summary>
             <value>The controller01.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.Controller02Handle">
             <summary>
             Gets the second controller device handle.
             </summary>
             <value>The controller01.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.Controller03Handle">
             <summary>
             Gets the third controller device handle.
             </summary>
             <value>The controller01.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.Controller04Handle">
             <summary>
             Gets the fourth controller device handle.
             </summary>
             <value>The controller01.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.IsVPUConnected">
             <summary>
             Gets a value indicating is VPU connected.
             </summary>
             <value><c>true</c> if is VPU connected; otherwise, <c>false</c>.</value>
            </member>
        <member name="E:Ximmerse.RhinoX.DeviceLLAPI.OnVPUConnectionStateIsChanged">
             <summary>
             Event callback on vpu connection state is changed.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.IsVPUFirstConnected">
             <summary>
             The flag to indicate if VPU is connected for the first time.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.DeviceLLAPI.OnVPUInitialized">
             <summary>
             Event : on VPU initialized.
             This event is fired for the first time VPU connect.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.m_RawPositionIndex">
             <summary>
             The index to retrieve the raw positional float[] array from VPU.
             [1,0,2] : for vertical VPU.
             [0,1,2] : for horizontal VPU.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.RawPositionIndex">
             <summary>
             The index to retrieve raw position.Sign is used to multiple the raw value.
             </summary>
             <value>The index of the raw position.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.RawPositionFieldMultiplier">
             <summary>
             Gets or sets the raw position field multiplier.
             </summary>
             <value>The raw rotation field multiplier.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.m_MarkerPosePreTiltEuler">
             <summary>
             use for pre tilt on the raw rotation of marker.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.MarkerPosePreTilt">
             <summary>
             Gets or sets the marker pose pre tilt.
             </summary>
             <value>The marker pose pre tilt.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.m_MarkerPosePostTiltEuler">
             <summary>
             use for post tilt on the raw rotation of marker.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.MarkerPosePostTilt">
             <summary>
             Gets or sets the marker pose post tilt.
             </summary>
             <value>The marker pose pre tilt.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.RawRotationIndex">
             <summary>
             The index to retrieve raw oritentation.
             </summary>
             <value>The index of the raw rotation.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.m_RawRotationFieldMultiplier">
             <summary>
             The raw rotation field multiplier.
             Should be 1 or -1
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.RawRotationFieldMultiplier">
             <summary>
             Gets or sets the raw rotation field multiplier.
             </summary>
             <value>The raw rotation field multiplier.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.InitializeLLAPI(System.Boolean)">
             <summary>
             Initializes Ximmerse LLAPI.
             Note: this will initialize both bluetooth module and VPU module.
             If you don't want to copy VPU built-in tracking json, copyVPUProfile should be false.
             </summary>
             <param name="copyVPUProfile">If set to <c>true</c> , copy vpu profiles.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.DeinitializeLLAPI">
             <summary>
             Deinitializes the LLAPI.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.OnVPUConnectionStateChanged(System.Int32,System.IntPtr)">
             <summary>
             Raises the device connect state change event.
             </summary>
             <param name="connect_st">Connect st.</param>
             <param name="ud">Ud.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.GetVPUSN">
             <summary>
             Gets the vpu serial number
             </summary>
             <returns>The vpusn.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.LoadMarkerTrackingProfile(Ximmerse.RhinoX.ObjectTrackingProfile)">
             <summary>
             Loads the marker tracking profile.
             </summary>
             <returns><c>true</c>, if marker tracking profile was loaded, <c>false</c> otherwise.</returns>
             <param name="profile">Profile.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.ResetTrackingProfile">
             <summary>
             Resets the tracking profile, this operation earse any loaded tracking profile at runtime.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.GetMarkerState(System.Int32,Ximmerse.RhinoX.MarkerInfo@)">
             <summary>
             Output the marker tracking info at the ID.
             Return true if the marker is tracked.
             </summary>
             <returns>The marker state.</returns>
             <param name="trackingID">Tracking ID.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.IsMarkerVisible(System.Int32)">
             <summary>
             Is the marker of the ID visible at the frame it's called.
             </summary>
             <returns><c>true</c>, if marker visible was ised, <c>false</c> otherwise.</returns>
             <param name="trackingID">Tracking identifier.</param>
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.DeviceLLAPI.SetMarkerTrackingLimitation(System.Nullable{System.Int32},System.Nullable{System.Single})-->
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.SetTrackingIdlePowerSavingMode(System.Boolean)">
             <summary>
             Sets tracking idle power saving mode on/off. 
             </summary>
             <param name="EnablePowerSaving">If set to <c>true</c> enable power saving.</param>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.TagTrackingLibVersion">
             <summary>
             Gets the tag tracking version.
             </summary>
             <value>The LLSDKV ersion.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.FPGAVersion">
             <summary>
             Gets the FPGA version.
             </summary>
             <value>The FPGAV ersion.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.AlgorithmVersion">
             <summary>
             Gets the algorithm version.
             </summary>
             <value>The algorithm version.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.vpuAlignmentAnchorCenterPoint">
             <summary>
             The vpu alignment data : anchor center point.
             标定的vpu 的锚点.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.vpuAlignmentAnchorCenterEuler">
             <summary>
             The vpu alignment anchor center euler.
             标定的vpu 锚点 euler.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.vioAlignmentAnchorCenterPoint">
             <summary>
             The vio alignment data : anchor center point.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.vioALignmentAnchorCenterEuler">
             <summary>
             The vio alignment data : anchor euler.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.InitializeVPUAlignmentData">
             <summary>
             Parse vpu calibration lib files.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.InitializeVIOAlignmentData">
             <summary>
             Initialize VIO alignment data.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.FactoryDefault">
             <summary>
             Device default value from factory.
             RhinoX 设备的出厂设计值。
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.FactoryDefault.VIO_Shift">
             <summary>
             The shift position from VIO anchor to screen center.
             VIO中心点到屏幕中心点的偏移 XYZ。
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.FactoryDefault.VIO_TiltEuler">
             <summary>
             The vio tilt euler from VIO anchor to screen center.
             VIO中心点到屏幕中心点的偏移Euler。
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.FactoryDefault.VPU_Shift">
             <summary>
             The VPU shift position from VPU anchor to screen center
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.FactoryDefault.VPU_TiltEuler">
             <summary>
             The VPU tilt euler from VIO anchor to screen center.
             </summary>
            </member>
    </members>
</doc>
